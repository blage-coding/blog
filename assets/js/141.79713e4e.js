(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{458:function(t,s,a){"use strict";a.r(s);var r=a(4),n=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_94-二叉树中序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_94-二叉树中序遍历"}},[t._v("#")]),t._v(" 94.二叉树中序遍历")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("栈实现：要注意外层while循环跳出条件，要考虑到树只有右子树的情况。空间O(n)")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("curr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//有左子树栈不为空或者只有右子树")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n             stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n             curr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("curr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n         curr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         curr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("curr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("线索二叉树：比较复杂，假设curr为当前遍历到的节点，分几种情况:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果没有左孩子，那么访问当前节点，开始遍历右子树，curr=curr.right")])]),t._v(" "),s("li",[s("p",[t._v("如果有左子树，那么在左子树中找到curr的前驱节点pre。")]),t._v(" "),s("p",[t._v("（pre=curr.left;   while(pre.right!=null&&pre.right!=curr)   pre=pre.right;），这时候根据"),s("strong",[t._v("pre.right的情况")]),t._v("(如果不分情况，只进行前驱节点指向curr操作，curr=curr.left，会导致后面curr的左子树访问完回到curr时，会继续访问左子树，"),s("strong",[t._v("无法判断左子树是处于还没进行访问，开始连接前驱节点的状态还是已经访问完毕的状态")]),t._v(")由分为两种操作：")]),t._v(" "),s("ul",[s("li",[t._v("若pre.right=null,则连接前驱，pre.right=curr;然后开始遍历左子树curr=curr.left。")]),t._v(" "),s("li",[t._v("若pre.right=curr,则说明"),s("strong",[t._v("当前是已经访问完左子树，第二次回到curr节点的状态")]),t._v("，这时候就访问当前节点curr，然后开始遍历右子树curr=curr.right。这里断不断开连接对后续操作没有影响。")])])])]),t._v(" "),s("p",[t._v("每个节点被访问两次，时间复杂度O(2n)=O(n)，空间复杂度O(1)。")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);