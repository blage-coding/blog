(window.webpackJsonp=window.webpackJsonp||[]).push([[383],{703:function(t,s,a){"use strict";a.r(s);var n=a(4),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[t._v("#")]),t._v(" join")]),t._v(" "),s("p",[t._v("使用join存在什么问题？下面围绕join语句的执行流程，使用前面学过的索引知识展开。")]),t._v(" "),s("h2",{attrs:{id:"join语句执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#join语句执行流程"}},[t._v("#")]),t._v(" join语句执行流程")]),t._v(" "),s("p",[t._v("场景：t1和t2表同时都有主键id，索引字段a，无索引字段b。t2表插入了1000行数据，t1表中插入了100行数据。")]),t._v(" "),s("h3",{attrs:{id:"_1-索引join查询-nlj"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-索引join查询-nlj"}},[t._v("#")]),t._v(" 1.索引join查询(NLJ)")]),t._v(" "),s("p",[t._v("使用"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("straight_join")])]),t._v("显示指定t1作为驱动表，t2作为被驱动表。整个语句执行过程如下：")],1),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t1 straight_join t2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ol",[s("li",[t._v("首先对t1会进行全表查询，然后将每一行扫描的数据放到t2表中进行比较。因此t1总共扫描"),s("strong",[t._v("100")]),t._v("行数据。")]),t._v(" "),s("li",[t._v("由于是对t2的a字段进行匹配，可以走索引。因此每行t1的行记录都会取出a字段值，在t2的a字段索引树进行比对，然后回表拿到t2的行记录并和t1的行记录拼接。")]),t._v(" "),s("li",[t._v("这里假设t1表中的数据和t2唯一对应。因此t2也会扫描100行数据。总共扫描行数为200。")])]),t._v(" "),s("p",[t._v("可以发现在这种条件下的join语句有如下特点：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("走了索引的join语句比拆成多个单表语句的执行性能好")]),t._v("。如果选择拆成单表的语句，首先从t1拿到全表扫描结果，然后每次取出a字段的值，接着执行100次SQL语句拼接where a=$t1.a。扫描行数虽然和join相同，但是执行了101条SQL语句。")]),t._v(" "),s("li",[t._v("驱动表会走全表扫描，因此尽量"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("让小表作为驱动表")])]),t._v("。")],1)]),t._v(" "),s("h3",{attrs:{id:"_2-不走索引的join查询-bnl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-不走索引的join查询-bnl"}},[t._v("#")]),t._v(" 2.不走索引的join查询(BNL)")]),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[s("strong",[t._v("如果join字段不走索引，那么不适合使用join查询，应该拆成单表")])]),t._v("。")],1),t._v(" "),s("h4",{attrs:{id:"_2-1不分块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1不分块"}},[t._v("#")]),t._v(" 2.1不分块")]),t._v(" "),s("p",[t._v("如果是被驱动表没有走索引又会怎么样？t2会扫描100*1000行数据么？实际算法流程如下：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t1 straight_join t2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ol",[s("li",[s("strong",[t._v("将t1表的所有行数据读入线程的内存"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[t._v("join_buffer")]),t._v("当中")],1),t._v("。扫描行数100")]),t._v(" "),s("li",[t._v("t2表进行全表扫描，取出扫描到的每行数据，与内存"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("中的t1表数据进行"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("比对")])]),t._v("，满足连接条件的与t2表记录拼接作为其中一个结果集。扫描行数1000，总共扫描行数1100。"),s("strong",[t._v("比较判断次数")]),t._v("100*1000=十万次。")],1),t._v(" "),s("li",[t._v("相比于t2表直接扫描十万行，时间复杂度相同。但是比较判断操作是在内存进行，因此速度上会快很多。")])]),t._v(" "),s("p",[t._v("此时驱动表无论是大表还是小表，比较次数和扫描次数都没有区别。")]),t._v(" "),s("h4",{attrs:{id:"_2-2分块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2分块"}},[t._v("#")]),t._v(" 2.2分块")]),t._v(" "),s("p",[t._v("这里如果"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("一次性放不下表t1(假设只能放进60行记录)，那么需要将t1表"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("分块")])]),t._v("放进"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("：")],1),t._v(" "),s("ol",[s("li",[t._v("先将t1表前60行记录放入内存"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("。")],1),t._v(" "),s("li",[t._v("扫描t2表的所有行记录，并进行比较。此时扫描行数1000条。")]),t._v(" "),s("li",[t._v("清空"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("，然后将t1表后40行记录放入"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("当中。")],1),t._v(" "),s("li",[t._v("再次扫描t2表所有记录，并进行比较判断。总比较次数不变还是十万次，而"),s("strong",[t._v("总扫描函数翻倍")]),t._v("变为2000条。")])]),t._v(" "),s("p",[t._v("根据计算，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("分块join场景应该让小表作为驱动表，并且应该将join_buffer_size设大一些，从而降低总扫描次数，提高join语句执行效率")])]),t._v("。")],1),t._v(" "),s("h3",{attrs:{id:"_3-bnl-分块不走索引-算法对buffer-pool的影响"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-bnl-分块不走索引-算法对buffer-pool的影响"}},[t._v("#")]),t._v(" 3.BNL(分块不走索引)算法对buffer pool的影响")]),t._v(" "),s("p",[t._v("前面提到如果buffer pool分为old区域和young区域，如果old区域的数据页超过1s如果再次被访问就会被放到young区域。对于使用了BNL算法的join语句，在以下情况可能会影响到buffer pool：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("被驱动表是冷数据表")]),t._v("。在BNL算法中驱动表被分块，因此"),s("strong",[t._v("被驱动表会被扫描多次")]),t._v("与每个块进行比较,而对于大被驱动表第二次扫描的时间间隔很可能会超过1s。从而导致"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("冷表数据都进入young区域")])]),t._v("。")],1),t._v(" "),s("li",[s("strong",[t._v("被驱动冷表是一个大表")]),t._v("。这种情况下，会导致"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("正常业务的数据页没法进入young区域")])]),t._v("。假设此时业务数据页还在old区域，在执行join语句时，因为当前被驱动大表数据页放不下old区域，导致"),s("strong",[t._v("old区域需要淘汰内存页(包括业务的数据页")]),t._v(")。")],1)]),t._v(" "),s("p",[t._v("因此大表join不仅对"),s("strong",[t._v("磁盘IO")]),t._v("有影响，同时也会对"),s("strong",[t._v("内存命中率")]),t._v("造成影响。所以这种情况下，只能够增大"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("内存大小，尽可能的减少被驱动表的扫描次数。")],1),t._v(" "),s("h3",{attrs:{id:"_4-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[t._v("#")]),t._v(" 4.总结")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("小表")]),t._v(" "),s("p",[t._v("对于表t1与t2来说，经过where条件筛选后，参与join的行数越小的，以及根据select字段和on字段判断参与join连接的行数据量越小的表称之为”小表“。")])]),t._v(" "),s("p",[s("strong",[t._v("NLJ中驱动表是取出一行行进行比较的表，BNL中驱动表是被一行行记录比较的表")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("什么情况下使用join语句？")]),t._v(" "),s("ul",[s("li",[t._v("如果被驱动表使用了索引(explain查看Extra字段为"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("Index Nested-Loop")])]),t._v(")，则可以使用join")],1),t._v(" "),s("li",[t._v("如果join的字段都用不上索引(explain查看Extra字段为"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("Block Nested-Loop")])]),t._v(")，则不能够使用join。需要拆分成单表SQL语句，避免过多的行扫描。")],1)])]),t._v(" "),s("li",[s("p",[t._v("查询语句使用join的情况下，应该"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("尽量保证”小表“作为驱动表")])]),t._v("。")],1)])]),t._v(" "),s("h2",{attrs:{id:"join语句优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#join语句优化"}},[t._v("#")]),t._v(" join语句优化")]),t._v(" "),s("p",[t._v("接下来谈论上面两种join算法(使用索引"),s("strong",[t._v("NLJ")]),t._v("和不使用索引分块"),s("strong",[t._v("BNL")]),t._v(")的优化。")]),t._v(" "),s("p",[t._v("场景：t1表插入了1000行数据，其中每行的a=1001-id，也就是id的逆序结果。t2表插入了100万行数据。")]),t._v(" "),s("h3",{attrs:{id:"_1-muti-range-read优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-muti-range-read优化"}},[t._v("#")]),t._v(" 1.Muti-Range Read优化")]),t._v(" "),s("p",[s("strong",[t._v("Muti-Range Read")]),t._v("(MRR)优化："),s("font",{attrs:{color:"red"}},[s("strong",[t._v("在多值查询下，尽量使用顺序读盘")])]),t._v("。具体来说，多行记录拿到id值进行回表时，如果按照"),s("strong",[t._v("主键递增的顺序查询")]),t._v("的话，对磁盘读可以近似于"),s("strong",[t._v("顺序读")]),t._v("，从而提高性能。")],1),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("上述SQL语句对于表t1来说，根据a字段进行回表时每个id值都是倒序存储(id随机读性能查)，因此InnoDB会对a字段取到的id值进行MRR优化(explain分析后Extra字段出现"),s("strong",[t._v("using MRR")]),t._v(")，具体如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230710/image.72d9mnrpbv40.png",alt:""}})]),t._v(" "),s("ol",[s("li",[t._v("根据a索引定位到所有满足条件的值，并将所有id值放入到"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("read_rnd_buffer")])]),t._v("当中。")],1),t._v(" "),s("li",[t._v("在"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("read_rnd_buffer")])]),t._v("里对id值进行"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("递增排序")])]),t._v("。")],1),t._v(" "),s("li",[t._v("根据"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("read_rnd_buffer")])]),t._v("内有序的id，从聚簇索引树中查叶子节点记录，并添加到结果集当中。")],1)]),t._v(" "),s("p",[t._v("另外要想稳定使用MRR，则MySQL需要设置如下参数：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" optimizer_switch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mrr_cost_based=off"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"_2-nlj优化-batched-key-access"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-nlj优化-batched-key-access"}},[t._v("#")]),t._v(" 2.NLJ优化——Batched Key Access")]),t._v(" "),s("p",[s("strong",[t._v("Batched Key Access")]),t._v("(BKA)算法：本质上是"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("NLJ算法+MRR优化")])]),t._v("。")],1),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t1 straight_join t2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("在NLJ算法中，驱动表t1每次只会从磁盘拿"),s("strong",[t._v("一行")]),t._v("数据到内存，与整个被驱动表中的所有行记录进行比对最后回表，因此t2表每次"),s("strong",[t._v("只会匹配一行记录并回表一次")]),t._v("，这时如果使用MRR优化就没有任何优势。")]),t._v(" "),s("p",[t._v("要使用MRR关键要"),s("strong",[t._v("保证被驱动表的回表时，能够"),s("font",{attrs:{color:"red"}},[t._v("批量")]),t._v("的回表，如果一行一行进行回表那就不能保证每次回表id的递增有序性了")],1),t._v("。")]),t._v(" "),s("p",[t._v("具体来说，在NLJ算法前，先把"),s("strong",[t._v("驱动表数据")]),t._v("放到"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("当中，然后再从内存中批量往t2表传入"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("多个t1表的行记录")])]),t._v("，此时就能用上MRR优化。")],1),t._v(" "),s("p",[t._v("另外，要启用BKA算法，需要在执行SQL语句之前进行设置：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" optimizer_switch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mrr=on,mrr_cost_based=off,batched_key_access=on'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"_3-bnl优化-建立索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-bnl优化-建立索引"}},[t._v("#")]),t._v(" 3.BNL优化——建立索引")]),t._v(" "),s("p",[t._v("前面提到BNL算法性能比较差，因此在join语句应该尽量避免使用BNL。核心做法就是"),s("strong",[t._v("建立索引转化为BKA")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" t2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("①最直接的方法就是在"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("被驱动表上建立索引")])]),t._v("，从而将BNL转化为BKA算法。")],1),t._v(" "),s("p",[t._v("②如果是一个低频SQL，那么建立索引比较浪费。可以考虑使用"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("临时表，在临时表上建立索引")])]),t._v("：")],1),t._v(" "),s("ol",[s("li",[s("p",[t._v("首先将表t2满足where筛选条件的数据放在临时表tmp_t当中，扫描行数为100万")])]),t._v(" "),s("li",[s("p",[t._v("然后"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("给临时表tmp_t上的b字段建立索引")])])],1)]),t._v(" "),s("li",[s("p",[s("strong",[t._v("t1表与临时表tmp_t做join操作")]),t._v("，扫描行数为t1 1000次+临时表tmp_t满足条件记录数。比较次数上因为临时表含有索引所以会很快。")]),t._v(" "),s("p",[t._v("临时表方案对应的SQL语句：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("temporary")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" temp_t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("primary")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("engine")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("innodb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" temp_t "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" temp_t "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("temp_t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])])]),t._v(" "),s("h3",{attrs:{id:"_4-哈希join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-哈希join"}},[t._v("#")]),t._v(" 4.哈希join")]),t._v(" "),s("p",[t._v("分块BNL算法要比较十亿次，原因在于"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("中的行记录是无序的，每行记录都要与"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("里t1表所有的数据一一比较。而如果t1表数据不是一个无序数组，而是一个"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("哈希表")])]),t._v("，那么只需要100万次(t2表大小)哈希查找。")],1),t._v(" "),s("p",[t._v("因为MySQL不支持哈希join，因此可以在"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("业务端")])]),t._v("实现：")],1),t._v(" "),s("ol",[s("li",[t._v("执行select * from t1拿到t1表所有1000行数据，并在业务端放入一个"),s("strong",[t._v("哈希结构")])]),t._v(" "),s("li",[t._v("执行select * from t2 where b>=1 and b<=2000拿到符合条件的数据。这里扫描行数100万行")]),t._v(" "),s("li",[t._v("在业务端把2000行数据一行一行取出来，拿到t1哈希表中进行比对。总共进行2000次哈希查找")])]),t._v(" "),s("p",[t._v("理论上效果要比临时表方案好。因为基于哈希的比较要快于基于索引比较。")]),t._v(" "),s("h3",{attrs:{id:"_5-三表join优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-三表join优化"}},[t._v("#")]),t._v(" 5.三表join优化")]),t._v(" "),s("p",[t._v("对于多表的join语句，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("驱动表只有一个，被驱动表会有多个")])]),t._v("。执行过程会"),s("strong",[t._v("嵌套进行")]),t._v("❓采用BKA进行优化时，每多一个join，就会多一个"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("。假设按照t1>t2>t3连接顺序，具体如下：")],1),t._v(" "),s("ol",[s("li",[t._v("首先t1表、t2表取出所有满足条件的行数据放入到join_buffer1和join_buffer2当中")]),t._v(" "),s("li",[t._v("从join_buffer1当中取出一行数据，与t2表进行比较判断。")]),t._v(" "),s("li",[t._v("从join_buffer2中取出上一步满足要求的t2行数据，与t3表进行比较判断。")]),t._v(" "),s("li",[t._v("如果把上述满足条件的记录拼接起来作为结果集。")]),t._v(" "),s("li",[t._v("此时t1相当于执行完了一条行数据，重复执行步骤2，3，4直到所有t1行数据比较完。")])]),t._v(" "),s("p",[t._v("假设三个表的结构相同，分别只建立了id主键，试分析以下SQL语句如何优化更高效：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" t2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" t3 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("t3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v("X "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v("Y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" t3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v("Z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("优化时首先需要尽可能"),s("strong",[t._v("使用BKA算法")]),t._v("，然后"),s("strong",[t._v("使用小表作为驱动表")]),t._v("。先确定小表再确定索引，小表需要根据X、Y、Z满足条件的行数判断：")]),t._v(" "),s("ul",[s("li",[t._v("如果t3表为小表，则连接顺序t3>t2>t1，在t2.b和t1.a建立索引。同时需要在每个表c字段加索引，目的是为了快速通过where条件筛选拿到实际参与join的行记录。")]),t._v(" "),s("li",[t._v("如果t1表为小表，则连接顺序t1>t2>t3，在t2.a和t3.b建立索引。同时需要在每个表c字段加索引，目的是为了快速通过where条件筛选拿到实际参与join的行记录。")]),t._v(" "),s("li",[t._v("而如果是t2表为小表 ，则需要进一步评估另外两个条件的过滤效果。")])]),t._v(" "),s("h2",{attrs:{id:"join语句写法-left-join与on-where选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#join语句写法-left-join与on-where选择"}},[t._v("#")]),t._v(" join语句写法(left join与on,where选择)")]),t._v(" "),s("p",[t._v("实验场景：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("engine")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("innodb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("engine")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("innodb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("💡原则："),s("font",{attrs:{color:"red"}},[s("strong",[t._v("NULL与任何值执行等值判断和不等值判断的结果，都是NULL")])]),t._v("。")],1),t._v(" "),s("p",[t._v("💡left join语义：左表匹配的行记录也加入到结果集以外，未匹配的行记录也需要加入到结果集(此时右表字段用NULL补充)。")]),t._v(" "),s("p",[t._v("💡explain后Extra字段没有显示使用哪种join算法，则默认表示"),s("strong",[t._v("当前使用的是NLJ索引算法")]),t._v("。")]),t._v(" "),s("p",[t._v("分析如下四条条SQL语句：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*Q1*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*Q2*/")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*Q3*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*Q4*/")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"q1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q1"}},[t._v("#")]),t._v(" Q1")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230712/image.1j77tg1pi50g.png",alt:""}})]),t._v(" "),s("p",[t._v("执行流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("a为驱动表，b为被驱动表。显然因为b表的字段都不存在索引，所以直接走分块BNL算法。")]),t._v(" "),s("li",[t._v("首先将a表的所有数据都放入到"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])])],1),t._v(" "),s("li",[t._v("然后拿出b表的每一行记录与"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("中的每一行记录进行比较，匹配则加入到结果集中")],1),t._v(" "),s("li",[t._v("最后"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("join_buffer")])]),t._v("中还剩下两条记录(1，1)和(2，2)没有被匹配，根据left join语义也一并加入结果集。B表字段使用NULL填充。得到的结果集有6条。")],1)]),t._v(" "),s("h3",{attrs:{id:"q2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q2"}},[t._v("#")]),t._v(" Q2")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230712/image.4qccru6w1gu0.webp",alt:""}})]),t._v(" "),s("p",[t._v("观察Extra字段可以得出"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("整个join语句使用NLJ算法")])]),t._v("，没有使用上join_buffer，并且a的f1索引字段被使用上了。执行流程如下：")],1),t._v(" "),s("ol",[s("li",[t._v("NLJ算法中a表的索引被使用，那么显然b表是驱动表，而a表是被驱动表。")]),t._v(" "),s("li",[t._v("每次从b表中取出一条数据，首先先用b.f1字段去查，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("如果匹配，那么再判断该条记录的f2是否等于b.f2")])]),t._v("。如果都满足则作为结果集一部分返回。\n"),s("ul",[s("li",[t._v("根据上面提到的规则，假设先不考虑where条件，仅仅只是on筛选后，那么得到的所有未匹配的a表记录上的b表字段都是NULL；接着"),s("strong",[t._v("where筛选时，b.f2的null字段与a.f2非空字段比较肯定不能通过筛选")]),t._v("。所以"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("整个语句虽然用了left join，但因为存在where筛选规则限制，所以无论如何最终都不可能出现a表未匹配+b表字段null补齐的行记录")])]),t._v("。")],1),t._v(" "),s("li",[s("strong",[t._v("也就是说left join的语义失效，整个语句改写退化为join")]),t._v("。这样就可以使用上NLJ算法了。")])])],1),t._v(" "),s("li",[t._v("重复步骤2，知道b表所有行记录都筛选过。最后得到的结果集有4条。")])]),t._v(" "),s("h3",{attrs:{id:"q3-q4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q3-q4"}},[t._v("#")]),t._v(" Q3&Q4")]),t._v(" "),s("p",[t._v("show warnings经过优化器优化后，两条语句都被改写为：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("①如果使用left join，那么当"),s("strong",[t._v("前左边的表不一定是驱动表")]),t._v("。")]),t._v(" "),s("p",[t._v("②如果需要join left的语义，那么"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("右表的字段不能放入到where中进行等值判断或不等值判断")])]),t._v("，必须全部写在on当中。否则会退化为普通join。")],1),t._v(" "),s("p",[t._v("③如果不需要left join的语义，那么使用join连接的过滤查询条件写在on和where没有区别，最终都会被优化到where条件上。")]),t._v(" "),s("h2",{attrs:{id:"simple-nlj算法性能问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#simple-nlj算法性能问题"}},[t._v("#")]),t._v(" Simple NLJ算法性能问题")]),t._v(" "),s("p",[s("strong",[t._v("Simple NLJ：指的是NLJ算法被驱动表没用上索引，需要全表扫描的一种情况")]),t._v("。")]),t._v(" "),s("p",[t._v("Simple NLJ算法的被驱动是在磁盘当中，每行驱动表的行记录都会与整个磁盘表(“被比较表”)进行全表扫描匹配。")]),t._v(" "),s("p",[t._v("BNL算法的“被比较表”放在join_buffer，每行被驱动表行记录都会与join_buffer进行全扫描匹配。")]),t._v(" "),s("p",[t._v("很显性能上BNL会更好于Simple NLJ算法，从以下几个方面来看：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("比较时，被比较表的磁盘IO开销：")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("BNL的“被比较表”稳定就在内存join_buffer中")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("Simple NLJ如果驱动表第k条记录比较时，buffer pooi上的“被比较表”的数据页恰巧被淘汰了，那么就需要重新等待一次磁盘IO，开销更大。")]),t._v(" "),s("p",[t._v("另外"),s("strong",[t._v("SNLJ算法被比较表天然会被多次访问比较")]),t._v("，移到young区的head后还会影响正常页面的数据页命中率。")])])])]),t._v(" "),s("li",[s("p",[t._v("“查找下一条记录”操作成本：")]),t._v(" "),s("ul",[s("li",[t._v("BNL在join_buffer数组上进行遍历，成本更低。")]),t._v(" "),s("li",[t._v("SNLJ内存数据页通过类似于指针操作，成本更高。")])])])])])}),[],!1,null,null,null);s.default=r.exports}}]);