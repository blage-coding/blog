(window.webpackJsonp=window.webpackJsonp||[]).push([[424],{745:function(t,s,a){"use strict";a.r(s);var r=a(4),n=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"netty"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#netty"}},[t._v("#")]),t._v(" Netty")]),t._v(" "),s("h2",{attrs:{id:"_1-谈一谈bio、nio、aio"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-谈一谈bio、nio、aio"}},[t._v("#")]),t._v(" 1.谈一谈BIO、NIO、AIO")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20231227/image.77dr2s9pbj80.webp",alt:""}})]),t._v(" "),s("p",[t._v("客户端数据经过网络传输到服务端机器，一般经过"),s("strong",[t._v("网卡、内核空间、用户空间、服务端程序处理")]),t._v("四个步骤。常见的IO模型分为BIO、NIO、AIO三种：")]),t._v(" "),s("ul",[s("li",[t._v("BIO：只要数据没准备好，则会一直阻塞。")]),t._v(" "),s("li",[t._v("NIO：解决了数据从网卡写到内核空间阻塞的问题。因此可以通过“程序控制轮询”的方式，查看监视哪个客户端请求的数据已经准备完成，从而衍生了IO多路复用技术。")]),t._v(" "),s("li",[t._v("AIO：操作系统准备好数据之后，会回调通知服务端程序进行处理。")])]),t._v(" "),s("h3",{attrs:{id:"每个请求建立一个线程开销大-io多路复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#每个请求建立一个线程开销大-io多路复用"}},[t._v("#")]),t._v(" 每个请求建立一个线程开销大？——IO多路复用")]),t._v(" "),s("p",[s("strong",[t._v("IO多路复用")]),t._v("："),s("font",{attrs:{color:"red"}},[s("strong",[t._v("单个线程同时处理多个IO请求")])]),t._v("。在应用程序与内核空间之间，再加一层单线程调用的多路复用程序，不断"),s("strong",[t._v("轮询")]),t._v("每个文件描述符是否准备就绪，数据就绪则直接交给对应的程序执行。")],1),t._v(" "),s("h3",{attrs:{id:"io多路复用轮询每个文件描述符慢-epoll"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#io多路复用轮询每个文件描述符慢-epoll"}},[t._v("#")]),t._v(" IO多路复用轮询每个文件描述符慢？——epoll")]),t._v(" "),s("p",[t._v("select和poll引入了"),s("strong",[t._v("代理")]),t._v("，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("解决了无事件轮询导致的CPU空转，系统效率低的问题")])]),t._v("。它可以监视所有流，当有IO事件时唤醒当前线程，当前线程轮询所有文件描述符执行对应的事件。")],1),t._v(" "),s("p",[s("strong",[t._v("epoll")]),t._v("："),s("font",{attrs:{color:"red"}},[s("strong",[t._v("解决了多并发连接情况下仅有少数IO事件活跃导致的CPU空转问题")])]),t._v("。它只会遍历轮询每个发生IO事件的文件描述符，只处理"),s("strong",[t._v("就绪")]),t._v("的文件描述符。")],1),t._v(" "),s("h2",{attrs:{id:"_2-为什么不用nio而是netty-netty的服务端创建流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么不用nio而是netty-netty的服务端创建流程"}},[t._v("#")]),t._v(" 2.为什么不用NIO而是Netty？Netty的服务端创建流程？")]),t._v(" "),s("p",[t._v("Netty和NIO的区别：")]),t._v(" "),s("ul",[s("li",[t._v("NIO直接用于开发编程灵活性差。同时不能解决粘包、重连、丢包等问题。")]),t._v(" "),s("li",[t._v("Netty可以用来作为网络通讯工具，控制节点之间的通信。还可以作为Http服务器。")]),t._v(" "),s("li",[t._v("Netty给开发者提供更简便的使用方式。同时实现支持多种协议栈。")]),t._v(" "),s("li",[t._v("Netty经过许多优秀开源项目的考验，Dubbo、RocketMQ等都使用了Netty，性能强大。")])]),t._v(" "),s("p",[t._v("Netty服务端创建流程：")]),t._v(" "),s("ul",[s("li",[t._v("指定线程数量给EventLoop，确定线程模型。")]),t._v(" "),s("li",[t._v("绑定监听的IP和端口。")]),t._v(" "),s("li",[t._v("指定消息处理的ChannelHandler对象。")])]),t._v(" "),s("h2",{attrs:{id:"_3-reactor模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-reactor模型"}},[t._v("#")]),t._v(" 3.Reactor模型")]),t._v(" "),s("p",[t._v("Reactor模式基于事件驱动，将对应的事件分发给对应的handler处理。")]),t._v(" "),s("p",[t._v("对于Netty的服务端而言，主要分成两大类操作，分别是"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("接收连接")])]),t._v("和"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("具体处理操作")])]),t._v("。其中默认设置线程数量为"),s("strong",[t._v("CPU核心数*2")]),t._v("。")],1),t._v(" "),s("p",[t._v("单线程模型：一个线程同时负责所有客户端监听和连接、数据处理。(redis)")]),t._v(" "),s("p",[t._v("多线程模型：一个线程处理客户端连接，多个线程(4个)进行数据处理操作。")]),t._v(" "),s("p",[t._v("主从线程模型：多个线程负责客户端监听和连接，多个线程负责数据处理操作。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("boss"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NioEventLoopGroup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nwork"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NioEventLoopGroup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerBootstrap")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerBootstrap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("group")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("boss"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("work"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h2",{attrs:{id:"_4-什么是粘包-半包问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是粘包-半包问题"}},[t._v("#")]),t._v(" 4.什么是粘包，半包问题？")]),t._v(" "),s("p",[t._v("粘包问题：接收到的数据，包含下一个数据包的内容。")]),t._v(" "),s("p",[t._v("半包问题：接收到当前包不完整的数据内容。")]),t._v(" "),s("p",[t._v("产生原因：TCP基于数据流传输数据，因此发送数据时，会根据缓存大小对包大小进行拆分或者是合并。")]),t._v(" "),s("p",[t._v("解决问题的关键在于读取数据时，需要根据传输协议明确每个数据包的"),s("strong",[t._v("开始标志")]),t._v("和"),s("strong",[t._v("结束标志")]),t._v("。Netty提供了几种不同的编解码器解决这个问题，可以根据换行符划分数据包结束标志符，自定义结束标志符，甚至可以指明数据包长度大小，来读取完整数据包信息。")]),t._v(" "),s("h2",{attrs:{id:"_5-长连接和心跳机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-长连接和心跳机制"}},[t._v("#")]),t._v(" 5.长连接和心跳机制")]),t._v(" "),s("p",[t._v("客户端每次和服务端建立连接时，有短连接和长连接两种方式，因为每次建立连接都需要三次握手和四次挥手，比较消耗网络资源。因此对于频繁请求的客户，可以使用长连接，传输完数据继续使用这个连接。")]),t._v(" "),s("p",[t._v("心跳机制是指，每隔一定时间，客户端和服务端之间发送数据包给对方，告诉对方还存活，确保TCP连接的有效性。")]),t._v(" "),s("h2",{attrs:{id:"_6-netty零拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-netty零拷贝"}},[t._v("#")]),t._v(" 6.Netty零拷贝")]),t._v(" "),s("p",[t._v("Netty的零拷贝主要体现在对数据操作的优化上：")]),t._v(" "),s("ul",[s("li",[t._v("CompositeByteBuf可以将多个ByteBuf合并，不需要另外复制。比如将head和body进行合并。")]),t._v(" "),s("li",[t._v("ByteBuf支持slice操作，将缓冲区分解成多个共享地址的内存区域。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);