(window.webpackJsonp=window.webpackJsonp||[]).push([[317],{635:function(a,t,e){"use strict";e.r(t);var n=e(4),r=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[a._v("#")]),a._v(" 注解")]),a._v(" "),t("h2",{attrs:{id:"配置类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置类"}},[a._v("#")]),a._v(" 配置类")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("使用@Configuration注解来声明一个类是配置类，类方法中可以使用@Bean注解某个方法，id是方法名，class类型是方法返回类型。")])]),a._v(" "),t("li",[t("p",[a._v("在@Configuration("),t("strong",[a._v("proxyBeanMethods")]),a._v("=false)设置组件依赖")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("若为true，则表明某个@Bean方法中的依赖实例获取时，每次会先从IOC容器中寻找对应的单例。对应full组件依赖模式。")])]),a._v(" "),t("li",[t("p",[a._v("若为false，则依赖的组件每次都会new一个新的对象，不是ioc容器里同一个组件。"),t("strong",[a._v("对应lite模式，用于组件之间没有依赖关系，加速容器启动过程")]),a._v("。")])])])]),a._v(" "),t("li",[t("p",[a._v("@ComponentScan指定包扫描范围")])]),a._v(" "),t("li",[t("p",[a._v("@Import(DbHelp.class)在配置类上注解，自动向IOC容器导入第三方包的类")])]),a._v(" "),t("li",[t("p",[a._v('@ConditionalOnBean(name="Tom")，仅当容器中含有id为Tom的Bean，其它Bean才会注册到容器中。')])]),a._v(" "),t("li",[t("p",[a._v('@ImportResource("classpath:spring.xml")，导入配置文件中的资源和Bean')])])]),a._v(" "),t("h2",{attrs:{id:"配置绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置绑定"}},[a._v("#")]),a._v(" 配置绑定")]),a._v(" "),t("ul",[t("li",[t("p",[a._v('在某个组件类注解@ConfigurationProperties(prefix="jdbc")，表示会从资源文件中把jdbc.username的值自动注入当前组件的username值。')]),a._v(" "),t("p",[a._v("其它地方声明这个组件时还需要@AutoWired")])]),a._v(" "),t("li",[t("p",[a._v("在配置类上注解@EnableConfigurationProperties(Car.class)。作用是开启这个类的配置绑定，并把这个类自动注入到容器中(该类不需要组件声明)")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);