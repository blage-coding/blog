(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{451:function(e,t,l){"use strict";l.r(t);var u=l(4),_=Object(u.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_102-二叉树的层序遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_102-二叉树的层序遍历"}},[e._v("#")]),e._v(" 102.二叉树的层序遍历")]),e._v(" "),t("p",[e._v("给你二叉树的根节点 "),t("code",[e._v("root")]),e._v(" ，返回其节点值的 "),t("strong",[e._v("层序遍历")]),e._v(" 。 （即逐层地，从左到右访问所有节点）。")]),e._v(" "),t("blockquote",[t("p",[e._v("输入：root = [3,9,20,null,null,15,7]\n输出：[[3],[9,20],[15,7]]")])]),e._v(" "),t("ol",[t("li",[e._v("队列实现层序遍历。如果用的是线性表(数组)，需要设置索引下标记录遍历移动节点beg,当前层的最后一个节点end,下一层的最后一个节点nend。")]),e._v(" "),t("li",[e._v("LinkedList类实现了Queue接口，因此可以使用LinkedList实现队列：")])]),e._v(" "),t("ul",[t("li",[e._v("Queue<TreeNode> queue=new LinkedList<TreeNode>();")]),e._v(" "),t("li",[e._v("queue.offer();插入元素到队尾")]),e._v(" "),t("li",[e._v("queue.poll();返回队首元素并删除")]),e._v(" "),t("li",[e._v("queue.isEmpty();判空")]),e._v(" "),t("li",[e._v("queue.size();返回队列大小")])])])}),[],!1,null,null,null);t.default=_.exports}}]);