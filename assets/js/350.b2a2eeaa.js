(window.webpackJsonp=window.webpackJsonp||[]).push([[350],{669:function(t,a,s){"use strict";s.r(a);var v=s(4),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"并发编程实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发编程实践"}},[t._v("#")]),t._v(" 并发编程实践")]),t._v(" "),a("h2",{attrs:{id:"_1-生产者消费者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-生产者消费者模式"}},[t._v("#")]),t._v(" 1.生产者消费者模式")]),t._v(" "),a("ul",[a("li",[t._v("创建第三者——阻塞队列，实现生产者消费者解耦。")]),t._v(" "),a("li",[t._v("使用"),a("strong",[t._v("多个生产者线程")]),t._v("生产数据，"),a("strong",[t._v("多个消费线程")]),t._v("消费数据。")])]),t._v(" "),a("p",[t._v("在不同场景下，可以设计相应的生产者消费者模型：")]),t._v(" "),a("ul",[a("li",[t._v("长连接服务器模式：多段多线程生产消费。同时消费者处理消息时，处理失败可以重复发送回队列。\n"),a("ul",[a("li",[t._v("总队列：存储所有客户端的消息。")]),t._v(" "),a("li",[t._v("单个分发线程：负责将总任务队列中的所有的任务取出，并散列发给对应索引的"),a("strong",[t._v("子任务队列")]),t._v("。")]),t._v(" "),a("li",[t._v("多个消费线程：每个子任务队列对应一个消费者线程处理任务。处理失败可以重新将任务发送回总队列。")])])]),t._v(" "),a("li",[t._v("线程池："),a("font",{staticStyle:{background:"rgb(255, 240, 102)"}},[a("strong",[t._v("利用线程池替代上述的任务阻塞队列+消费者")])]),t._v("。生产者直接将任务丢入线程池，效率高，不需要先存再取。")],1)]),t._v(" "),a("h2",{attrs:{id:"_2-线上问题定位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-线上问题定位"}},[t._v("#")]),t._v(" 2.线上问题定位")]),t._v(" "),a("ol",[a("li",[t._v("Linux命令行下，使用TOP命令查看每个进程的情况。在COMMAND为java那行即为java进程的性能数据。")]),t._v(" "),a("li",[t._v("top命令：\n"),a("ul",[a("li",[a("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[a("strong",[t._v("top -1")])]),t._v("：查看"),a("strong",[t._v("每个CPU")]),t._v("性能数据，利用率如果显示100%，可能写了一个死循环。")],1),t._v(" "),a("li",[a("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[a("strong",[t._v("top -H")])]),t._v("：查看"),a("strong",[t._v("每个线程")]),t._v("的性能数据，存在几种情况：\n"),a("ul",[a("li",[t._v("利用率100%死循环：使用jstat查看GC，或者将线程dump。")]),t._v(" "),a("li",[t._v("某个线程一直在TOP10位置，性能有问题。")])])],1)])])]),t._v(" "),a("h2",{attrs:{id:"_3-性能测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-性能测试"}},[t._v("#")]),t._v(" 3.性能测试")]),t._v(" "),a("p",[t._v("启动线程池，多个线程通过执行“调用接口”的任务，对服务器上的接口进行压测。")]),t._v(" "),a("p",[a("strong",[t._v("查看有多少个机器连接到当前主机的端口")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("netstat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-nat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" 端口号 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("strong",[t._v("查看系统内存情况")])]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /prov/meminfo\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"_4-异步任务池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-异步任务池"}},[t._v("#")]),t._v(" 4.异步任务池")]),t._v(" "),a("p",[t._v("线程池存在的问题：①运行线程池的程序重启之后，会导致任务丢失。②线程池只能处理本机任务")]),t._v(" "),a("p",[t._v("每台机器配置一个任务池，一个任务池中有多个线程池，执行的任务的流程如下：")]),t._v(" "),a("ul",[a("li",[t._v("任意一台机器线程池接受到到任务后，首先将任务"),a("font",{staticStyle:{background:"rgb(255, 240, 102)"}},[a("strong",[t._v("保存到全局统一的数据库")])]),t._v("当中。")],1),t._v(" "),a("li",[t._v("某台机器的任务池从数据库当中取出任务并执行。")])]),t._v(" "),a("p",[t._v("关于任务的存储，细节如下：")]),t._v(" "),a("ul",[a("li",[t._v("存储任务时，需要保存任务的状态、变量等等信息，保证任何机器拿到该任务都能执行成功。"),a("strong",[t._v("资源和变量的访问需要存储到全局的共享资源地址")]),t._v("。")]),t._v(" "),a("li",[t._v("不同线程池对应处理"),a("strong",[t._v("不同优先级、不同响应时间的任务")]),t._v("。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);