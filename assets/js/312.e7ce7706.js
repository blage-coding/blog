(window.webpackJsonp=window.webpackJsonp||[]).push([[312],{631:function(s,n,a){"use strict";a.r(n);var e=a(4),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"spring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[s._v("#")]),s._v(" Spring")]),s._v(" "),n("h2",{attrs:{id:"ioc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ioc"}},[s._v("#")]),s._v(" IOC")]),s._v(" "),n("p",[s._v("Inversion of control / Dependency injection")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("IOC容器创建，并通过bean工厂获取类对象("),n("strong",[s._v("仅当接口的实现类唯一，可以根据接口获取bean")]),s._v(")")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('ApplicationContext ioc = new ClassPathXmlApplicationContext("applicationContext.xml");\nUser user = (User) ioc.getBean("user");\nUser user = (User) ioc.getBean(User.class);\nUser user=(User) ioc.getBean(UserService.class);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("①实例化方法默认调用无参构造器。同时通过setter依赖注入(简单类型ioc是"),n("strong",[s._v("通过get和set方法对属性进行赋值")]),s._v("，引用类型使用ref标签引用其它bean的id)")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<bean id="school" class="pojo.School">\n--通过无参构造方法实例化Bean\n<bean id="stu" class="pojo.Stu">\n    <property name="name" value="村姑"></property>\n    <property name="age" value="20"></property>\n    <property name="address">\n        <null></null>\n    </property>\n    <property name="school" ref="school"/>\n</bean>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("strong",[s._v("②通过实现一个工厂类FactoryBean来实例化Bean")]),s._v("（注意这里bean的class配置的是工厂类)")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class UserDaoFactoryBean implements FactoryBean<UserDao> {\n    @Override\n    public UserDao getObject() throws Exception {\n        return new UserDaoImpl();\n    }\n    @Override\n    public Class<?> getObjectType() {\n        return UserDao.class;\n    }\n}\n----配置-----\n<bean id="userDao" class=factory.UserDaoFactoryBean/>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("构造器注入使用constructor-arg")])]),s._v(" "),n("li",[n("p",[s._v("导入第三方Bean，并导入资源文件")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<context:property-placeholder location="jdbc.properties"/>\n    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">\n        <property name="driverClassName" value="${driver}"></property>\n        <property name="url" value="${url}"></property>\n        <property name="username" value="${username}"></property>\n        <property name="password" value="${password}"></property>\n     </bean>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("自动装配：ioc容器根据bean依赖的资源或属性在容器中自动查找并注入到bean的属性的过程。")]),s._v(" "),n("p",[s._v('方法①使用ref标签。方法②通过给bean指定autowire="byType"，bean下所有的依赖根据属性类型'),n("font",{attrs:{color:"red"}},[n("strong",[s._v("去bean里面找匹配的类型")])]),s._v("来实例化(不能用于简单类型)。"),n("strong",[s._v("注意这两种方法依赖属性都需要实现set方法")])],1)]),s._v(" "),n("li",[n("p",[s._v("加载properties/生命周期/...")])])]),s._v(" "),n("h2",{attrs:{id:"注解开发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注解开发"}},[s._v("#")]),s._v(" "),n("strong",[s._v("注解开发")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("定义bean通过给类添加注解@Componet(@Controller，@Service，@Repository)，还可以给某个方法添加@Bean，表示方法的返回对象添加到ioc容器中(根据方法名创建bean)。")]),s._v(" "),n("p",[s._v("在applicationContext.xml中只添加如下，表示扫描包下所有的类的注解标签")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<context:component-scan base-package="Dao，aop">\n----spring扫描其它组件，springMVC扫描控制层，使用排除扫描----\n<context:exclude-filter type="annotation"\nexpression="org.springframework.stereotype.Controller"/>\n</context:component-scan>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("纯注解开发")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('----定义配置类----\n@Configuration   \n@ComponentScan({"包1"，"包2"})\npublic class SpringConfig{\n}\n----使用---\nApplicationContext ioc=new AnnotationConfigApplicationContext(SpringConfig.class);\nioc.getBean("")\n----其它注解类型-----\n@autowired   引用类型自动装配，不需要实现set方法\n@value("admin")   普通类型自动装配\n@Bean 当前方法返回的是一个bean,通过getBean获取\n第三方Bean注入资源直接在方法形参写上资源类型，Spring自动会根据类型注入资源\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])])])]),s._v(" "),n("h2",{attrs:{id:"aop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[s._v("#")]),s._v(" "),n("strong",[s._v("AOP")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("通过代理对象控制核心方法抽离")]),s._v(" "),n("p",[s._v("静态代理：A和B类共同实现了C接口，A类中如果要给核心方法增强功能，比如在前后添加日志，或者是try-catch捕获异常，那么开发者在实现A类中就不能够只专注于业务。所以做法是实现B类，类里面有一个A的实例对象，重写C类接口方法的同时再调用A把核心方法放进去，前后进行增强实现。这样子既能做到通过A修改核心方法，同时也能够增强实现方法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("B{\nfun{\n日志1;\nA.fun();\n日志2;\n}}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("动态代理： 动态生成一个代理对象，可以代理任意类(target)和接口。通过反射调用目标类的接口方法。")]),s._v(" "),n("p",[s._v("jdk动态代理要求必须要有接口，生成的代理类和目标类不在同一个包下。")]),s._v(" "),n("p",[s._v("cglib最终代理类会自动继承目标类。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public Object getProxy() {\n    ClassLoader classLoader = target.getClass().getClassLoader();\n    Class<?>[] interfaces = target.getClass().getInterfaces();\n    InvocationHandler h=new InvocationHandler() {\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            //...\n            Object result = method.invoke(target, args);\n            //...\n            return result;\n        }\n    };\n    return Proxy.newProxyInstance(classLoader, interfaces, h);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("AOP相关术语")]),s._v(" "),n("p",[s._v("横切关注点：非核心业务方法")]),s._v(" "),n("p",[s._v("切面：把所有横切关注点放到切面类中进行封装，每个横切关注点都叫做一个通知。")]),s._v(" "),n("p",[s._v("连接点：原目标方法中抽出横切关注点的位置(也就是核心方法)，切入点是定位连接点的方式。")])]),s._v(" "),n("li",[n("p",[s._v("标注方式实现AOP：在切面类上注解@Aspect，然后spring配置文件添加<aop:aspectj-autoproxy/>")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@Component\n@Aspect\npublic class LoggerAspest {\n//任意参数类型，类中任意方法\n    @Before("execution(* aop.CalImpl.*(..))")\n    public void before(JoinPoint joinpoint) {\n        System.out.println("前置通知");\n    }}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])])])]),s._v(" "),n("h2",{attrs:{id:"声明式事务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#声明式事务"}},[s._v("#")]),s._v(" 声明式事务")]),s._v(" "),n("p",[s._v("Jdbc.Template实现——Spring封装sql语句的实现类")]),s._v(" "),n("p",[s._v("@Transactional——注解式声明事务，添加注解的方法或者类会成为连接点")])])}),[],!1,null,null,null);n.default=t.exports}}]);