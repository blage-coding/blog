(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{486:function(t,i,r){"use strict";r.r(i);var _=r(4),a=Object(_.a)({},(function(){var t=this,i=t._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"_221-最大正方形"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_221-最大正方形"}},[t._v("#")]),t._v(" 221.最大正方形")]),t._v(" "),i("p",[t._v("在一个由 "),i("code",[t._v("'0'")]),t._v(" 和 "),i("code",[t._v("'1'")]),t._v(" 组成的二维矩阵内，找到只包含 "),i("code",[t._v("'1'")]),t._v(" 的最大正方形，并返回其面积。")]),t._v(" "),i("blockquote",[i("p",[t._v('输入：matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]\n输出：4')])]),t._v(" "),i("ol",[i("li",[i("p",[t._v("动规。直接在原数组上维护更新dp表，"),i("strong",[t._v("dp[i][j]表示以matrix[i][j]为正方形右下角端点的最大正方形的边长")]),t._v("。则"),i("strong",[t._v("当matrix[i][j]不等于'0'时")]),t._v("，发生状态转移方程：")]),t._v(" "),i("p",[i("strong",[t._v("matrix[i][j]=Math.min(matrix[i-1][j],matrix[i][j-1],matrix[i-1][j-1])+1")])])])])])}),[],!1,null,null,null);i.default=a.exports}}]);