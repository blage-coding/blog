(window.webpackJsonp=window.webpackJsonp||[]).push([[399],{719:function(s,t,a){"use strict";a.r(t);var n=a(4),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"nacos面试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nacos面试"}},[s._v("#")]),s._v(" Nacos面试")]),s._v(" "),t("h2",{attrs:{id:"_1-nacos服务注册表结构是怎样的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-nacos服务注册表结构是怎样的"}},[s._v("#")]),s._v(" 1.Nacos服务注册表结构是怎样的？")]),s._v(" "),t("p",[s._v("分级存储模型：namespace命名空间(生产环境/测试环境...)>分组group>服务>集群(上海/北京...)")]),s._v(" "),t("ul",[t("li",[s._v("在ServiceManager类下，"),t("font",{attrs:{color:"red"}},[t("strong",[s._v("Map<String ,Map<String ,Service>>")])]),s._v("中的基本类型对应Map(namespace,Map(group@@servicename,Service))，每个namespace对应一个不同组的微服务Map")],1),s._v(" "),t("li",[s._v("每个Service服务类下面又维护一个"),t("font",{attrs:{color:"red"}},[t("strong",[s._v("Map<String,Cluster>")])]),s._v("，对应集群key和集群实体。")],1),s._v(" "),t("li",[s._v("每个Cluster类下，又维护了一个"),t("font",{attrs:{color:"red"}},[t("strong",[s._v("Set<Instance>")])]),s._v("，代表微服务实例。")],1)]),s._v(" "),t("h2",{attrs:{id:"_2-nacos如何支持数十万服务注册压力"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-nacos如何支持数十万服务注册压力"}},[s._v("#")]),s._v(" 2.Nacos如何支持数十万服务注册压力")]),s._v(" "),t("p",[s._v("①异步更新本地注册表②同步到Nacos集群中的其他节点")]),s._v(" "),t("p",[s._v("Nacos收到服务注册请求时，不会立即写数据，而是把服务注册的任务放入一个"),t("font",{attrs:{color:"red"}},[t("strong",[s._v("阻塞队列")])]),s._v("，然后就立即响应给客户端。然后利用"),t("font",{attrs:{color:"red"}},[t("strong",[s._v("线程池")])]),s._v("读取阻塞队列中的任务，异步完成实例更新，提高并发写能力。")],1),s._v(" "),t("p",[s._v("阻塞队列没有元素时会进入wait状态等待新的元素，线程释放CPU执行权，直到新的元素来唤醒。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Loggers")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DISTRO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("info")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"distro notifier started"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 死循环，不断执行任务。因为是阻塞队列，不会导致CPU负载过高")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从阻塞队列中获取任务")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pair")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DataOperation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" pair "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tasks"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("take")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("handle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pair"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Loggers")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DISTRO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("error")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[NACOS-DISTRO] Error while handling notifying task"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h2",{attrs:{id:"_3-nacos如何解决并发读写冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-nacos如何解决并发读写冲突"}},[s._v("#")]),s._v(" 3.Nacos如何解决并发读写冲突")]),s._v(" "),t("ul",[t("li",[s._v("在添加实例函数中，对service对象添加了"),t("strong",[s._v("synchronized同步锁")]),s._v("，对于"),t("strong",[s._v("同一个服务的多个实例")]),s._v("只能够串行来完成注册。")]),s._v(" "),t("li",[s._v("Nacos在更新实例列表时，会采用CopyOnWrite技术，首先将旧的实例列表"),t("strong",[s._v("拷贝")]),s._v("一份，然后"),t("strong",[s._v("更新拷贝的实例列表")]),s._v("，而此时"),t("strong",[s._v("读的还是旧的实例列表")]),s._v("，最后再用更新后的实例列表拉覆盖旧的实例列表。")]),s._v(" "),t("li",[s._v("更新拷贝的旧实例列表的过程：①ips首先和旧实例列表求"),t("strong",[s._v("交集")]),s._v("，得到需要"),t("strong",[s._v("更新")]),s._v("的实例列表，然后将旧实例的健康状态更新到新的实例。②ips-旧实例列表，得到"),t("strong",[s._v("新增")]),s._v("的实例列表。③旧实例列表-ips，得到需要"),t("strong",[s._v("删除")]),s._v("的实例列表。")])]),s._v(" "),t("h2",{attrs:{id:"_4-nacos和eureka区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-nacos和eureka区别"}},[s._v("#")]),s._v(" 4.Nacos和Eureka区别")]),s._v(" "),t("p",[s._v("Nacos实例分为永久实例和临时实例，临时实例是基于心跳监测，而永久实例基于主动监测。")]),s._v(" "),t("p",[s._v("Eureka心跳只有临时实例，支支持心跳模式。")]),s._v(" "),t("p",[s._v("服务发现上面Nacos支持定时拉取和订阅推送；Eureka只支持定时拉取。")]),s._v(" "),t("p",[s._v("订阅机制：客户端每6s通过一个定时任务从注册中心获取实例列表，当发现实例发生变化，发布变更事件，发送UDP广播给所有订阅者，订阅者进行实例更新、更改本地缓存。")]),s._v(" "),t("h1",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")])])])}),[],!1,null,null,null);t.default=r.exports}}]);