(window.webpackJsonp=window.webpackJsonp||[]).push([[465],{784:function(t,s,a){"use strict";a.r(s);var e=a(4),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"api-gateway-assist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api-gateway-assist"}},[t._v("#")]),t._v(" Api-gateway-assist")]),t._v(" "),s("h2",{attrs:{id:"_1-服务发现gateway-assist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-服务发现gateway-assist"}},[t._v("#")]),t._v(" 1.服务发现gateway-assist")]),t._v(" "),s("h4",{attrs:{id:"网关算力服务注册发现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网关算力服务注册发现"}},[t._v("#")]),t._v(" 网关算力服务注册发现")]),t._v(" "),s("p",[t._v("核心：通过设计SpringBoot Starter，让gateway-engine引擎启动SpringBoot程序时，自动读取core算力节点配置信息(yml)，并根据该信息发送HTTP请求，将gateway-core注册到网关注册中心。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230515/image-20230425094053736.5lah3ka2t2o0.webp",alt:"image-20230425094053736"}})]),t._v(" "),s("p",[t._v("GatewayServiceProperties：通过注解@ConfigurationProperties实现对yml配置读取。")]),t._v(" "),s("p",[t._v("RegisterGatewayService#doRegister：根据yml读取的算力节点信息，通过HttpUtil.post向注册中心的网关注册接口发送HTTP请求。")]),t._v(" "),s("p",[s("strong",[t._v("GatewayApplication：实现ApplicationListener")]),t._v("，利用"),s("strong",[t._v("消息监听发布机制")]),t._v("，当refresh结束后触发doRegister流程。")]),t._v(" "),s("h4",{attrs:{id:"configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" @Configuration")]),t._v(" "),s("p",[t._v("①在@Configuration注解配置类中，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("通过@Bean注解在返回new实例的方法上来实现注册自定义bean。")])])],1),t._v(" "),s("p",[t._v("②在@Configuration注解配置类中，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("通过@ComponentScan指定自定义bean所在的包，实现注册自定义bean。")])])],1),t._v(" "),s("ul",[s("li",[t._v("原理")])]),t._v(" "),s("p",[t._v("AnnotationConfigApplicationContext类中会初始化"),s("strong",[t._v("ConfigurationClassPostProcessor")]),t._v("，他会在refresh中invokeBeanFactoryPostProcessors执行。")]),t._v(" "),s("p",[s("strong",[t._v("ConfigurationClassPostProcessor")]),t._v("解析过程中，首先检查BeanDefinition是否@Configuration注解标记，然后再扫描并构建新的BeanDefinition，初始化容器。")]),t._v(" "),s("h4",{attrs:{id:"spi机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spi机制"}},[t._v("#")]),t._v(" SPI机制")]),t._v(" "),s("ul",[s("li",[t._v("SPI概念")])]),t._v(" "),s("p",[t._v("全称"),s("strong",[t._v("Service Provider Interface")]),t._v("，服务提供者接口。"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("调用方可以自定义实现服务提供方的服务接口，并替换其默认实现。")])]),t._v("也就是说通过SPI机制，我们可以"),s("strong",[t._v("自定义修改覆盖外部Jar包(服务提供方)里的接口实现。")])],1),t._v(" "),s("p",[t._v("而API(Application Provider Interface)的使用完全依赖于所提供的Jar包。")]),t._v(" "),s("ul",[s("li",[t._v("JDK原生SPI")])]),t._v(" "),s("p",[t._v('java.util.ServiceLoader：JDK原生SPI的核心类，可以通过类名获取在"META-INF/services/"下的多个配置实现文件。')]),t._v(" "),s("p",[s("strong",[t._v("缺点：无法确认具体加载哪一个实现，仅靠ClassPath的顺序决定。同时不能按需加载，需要遍历所有内容并实例化，耗时。")])]),t._v(" "),s("ul",[s("li",[t._v("Dubbo SPI")])]),t._v(" "),s("p",[t._v("核心在于支持"),s("strong",[t._v("按”名“读取SPI服务实现类")]),t._v("。")]),t._v(" "),s("p",[t._v("在服务接口添加@SPI注解("),s("strong",[t._v("可以指定默认实现")]),t._v(")。在 "),s("strong",[t._v("META-INF/dubbo")]),t._v("路径下支持"),s("strong",[t._v("别名配置")]),t._v("("),s("font",{attrs:{color:"red"}},[t._v("键值对配置，key为别名，value为实现类名")]),t._v(")，从而解决了SPI服务具体加载的实现类。")],1),t._v(" "),s("div",{staticClass:"language-properties line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("optimusPrime")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("org.apache.spi.OptimusPrime")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("bumblebee")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("org.apache.spi.Bumblebee")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("内部框架获取服务通过ExtensionLoader实现(Dubbo内部也继承了轻量级的AOP和IOC)：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DubboSPITest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExtensionLoader")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Robot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" extensionLoader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExtensionLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getExtensionLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Robot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Robot")]),t._v(" optimusPrime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" extensionLoader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getExtension")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"optimusPrime"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        optimusPrime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Robot")]),t._v(" bumblebee "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" extensionLoader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getExtension")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bumblebee"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        bumblebee"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("ul",[s("li",[s("strong",[t._v("Spring SPI")])])]),t._v(" "),s("p",[t._v("JDK和Dubbo的SPI机制每个扩展点单独一个文件，而对于Spring框架来说，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("所有扩展点都存放在META-INF/spring.factories一个文件当中")])]),t._v("，指定全限定名的接口+自定义实现类。")],1),t._v(" "),s("div",{staticClass:"language-properties line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("org.springframework.boot.context.config.ConfigDataLocationResolver")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("\\\ncom.example.LocationResolver")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("核心是通过SpringFactoriesLoader获取对应的服务。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230515/image-20230425162145482.6bnyb1s0glk.webp",alt:"image-20230425162145482"}})]),t._v(" "),s("h2",{attrs:{id:"_2-重构-netty服务端和配置类缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-重构-netty服务端和配置类缓存"}},[t._v("#")]),t._v(" 2.重构：Netty服务端和配置类缓存")]),t._v(" "),s("ul",[s("li",[t._v("Netty通信服务和配置类的初始化")])]),t._v(" "),s("p",[t._v("核心：将整个网关的"),s("strong",[t._v("Netty服务启动")]),t._v("和"),s("strong",[t._v("配置初始化")]),t._v("全部交给"),s("strong",[t._v("gateway-assist自动配置类实现")]),t._v("。")]),t._v(" "),s("p",[t._v("①在GatewayApplication监听器中引入Configuration(交给Spring管理)，在拉取RPC注册信息后，根据聚合信息实现"),s("strong",[t._v("配置缓存初始化")]),t._v("。")]),t._v(" "),s("p",[t._v("②在GatewayAutoConfig启动配置类中引入initGateway方法，根据网关IP端口配置进行"),s("strong",[t._v("网关通信服务初始化")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("GatewayAutoConfig#initGateway")]),t._v("："),s("strong",[t._v("把启动网关通信服务(gateway-core)交给Spring进行")]),t._v("。在SpringBoot应用程序启动后，spring主线程在"),s("strong",[t._v("执行@Bean注解方法初始化Bean")]),t._v("时，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("会从线程池中获取新的线程，异步执行Netty服务端的所有流程。")])])],1),t._v(" "),s("ul",[s("li",[t._v("大体流程")])]),t._v(" "),s("p",[t._v("①启动zookeeper和真正的服务提供方api-gateway-test-provider，暴露RPC服务")]),t._v(" "),s("p",[t._v("②启动网关注册中心api-gateway-center")]),t._v(" "),s("p",[t._v("③启动api-gateway-assist00，而因为其中内嵌了assist和core网关算力，所以"),s("strong",[t._v("整个网关助手测试工程")]),t._v("此时可以充当"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("一个具有自动配置(服务拉取，注册，初始化)的算力节点。")])]),t._v("(相当于assist+core的一个胖jar)")],1),t._v(" "),s("p",[t._v("当用户访问网关监听地址时，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("HTTP请求会打到assist0中的Netty服务端线程")])]),t._v("，触发监听事件，并根据uri从缓存中取出对应的Dubbo配置，向test-provider请求并响应给用户。")],1),t._v(" "),s("p",[t._v("当网关服务启动后，如果前端操作增添接口，后台拿到接口数据需要①向注册中心center(相当于"),s("strong",[t._v("数据库")]),t._v(")的注册接口发送请求，"),s("strong",[t._v("完成数据库中接口信息的写入")]),t._v("②获取到gateway-assist00(gateway-core)里的交给Spring管理的"),s("strong",[t._v("Configuration Bean实例")]),t._v("(@Autowired)，然后通过手动式编程将当前接口信息加入配置缓存，完成注册。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230515/assist00.4ecvvls84lu0.webp",alt:"assist00"}})]),t._v(" "),s("ul",[s("li",[t._v("问题")])]),t._v(" "),s("p",[t._v("网关算力真正与RPC服务建立远程连接，获取泛化实例过程还是在触发Netty监听事件中的openSession进行。")]),t._v(" "),s("p",[t._v("①注册添加配置缓存中，键值对key由name改为对应application和interface的Id")]),t._v(" "),s("p",[t._v("②zookeeper在虚拟机，采用host模式启动(bridge模式通信失败)只能访问虚拟机IP访问，127.0.0.1失败。")]),t._v(" "),s("h2",{attrs:{id:"_3-maven三大打包插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-maven三大打包插件"}},[t._v("#")]),t._v(" 3.Maven三大打包插件")]),t._v(" "),s("h4",{attrs:{id:"maven-jar-plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven-jar-plugin"}},[t._v("#")]),t._v(" maven-jar-plugin")]),t._v(" "),s("p",[t._v("默认的打包插件，用来打普通的project JAR包；")]),t._v(" "),s("h4",{attrs:{id:"maven-assembly-plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven-assembly-plugin"}},[t._v("#")]),t._v(" maven-assembly-plugin")]),t._v(" "),s("p",[t._v("支持自定义的打包结构，也可以定制依赖项等。")]),t._v(" "),s("h4",{attrs:{id:"maven-shade-plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven-shade-plugin"}},[t._v("#")]),t._v(" maven-shade-plugin")]),t._v(" "),s("p",[t._v("①"),s("strong",[t._v("将依赖的jar包打包到当前jar包")]),t._v("(常规打包是不会将所依赖jar包打进来的)，也就是说其他地方引用gateway-assist插件时，不需要再导入gateway-core依赖。")]),t._v(" "),s("p",[t._v("②对依赖的jar包进行重命名。")]),t._v(" "),s("p",[t._v("使用：将项目打成一个可执行jar包时，configuration下增加artifactSet，includes添加需要增加的第三方maven依赖，excludes排除不需要打包进来的第三方依赖，")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-shade-plugin</artifactId>\n    <configuration>\n        <artifactSet>\n            <includes>\n                <include>com.panhai.gateway:api-gateway-core:jar:</include>\n            </includes>\n        </artifactSet>\n    </configuration>\n</plugin>\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h4",{attrs:{id:"普通jar包和fat-jar"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通jar包和fat-jar"}},[t._v("#")]),t._v(" 普通jar包和Fat jar")]),t._v(" "),s("p",[s("strong",[t._v("普通的jar只包含当前 jar的信息，不含有第三方 jar，因此当内部依赖第三方jar时直接运行则会报错")]),t._v("，这时候需要将第三方jar内嵌到可执行jar里。")]),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[s("strong",[t._v("Fatjar：将一个jar及其依赖的三方jar全部打到一个包中。胖包到哪里都能用，而要使用瘦包必须引用的工程中自带依赖才行。")])])],1),t._v(" "),s("p",[s("strong",[t._v("spring-boot-maven-plugin和maven-shade-plugin")]),t._v("(指定)打的包都是胖jar。")]),t._v(" "),s("h2",{attrs:{id:"_4-容器关闭监听与异常管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-容器关闭监听与异常管理"}},[t._v("#")]),t._v(" 4.容器关闭监听与异常管理")]),t._v(" "),s("ul",[s("li",[t._v("功能")])]),t._v(" "),s("p",[t._v("①添加一个容器关闭的监听器，当容器关闭时需要把网关通信core下的Netty服务也一起关闭。")]),t._v(" "),s("p",[t._v("GatewayApplication监听ContextClosedEvent上下文关闭事件，引入Channel作为成员属性，用于关闭Netty服务。")]),t._v(" "),s("p",[t._v("②将网关的注册和RPC服务拉取这两个操作，放入到上下文接口的setApplicationContext方法，这样可以在注册服务与拉取配置失败时，"),s("strong",[t._v("直接抛异常关闭容器")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("ApplicationContextAware扩展点")])]),t._v(" "),s("p",[s("strong",[t._v("实现上下文容器感知接口的对象的方法setApplicationContext")]),t._v("，在beanPostProcessorsBeforeInitialization阶段中，通过调用ApplicationContextAwareProcessor(实现了BeanPostProcessor)的"),s("strong",[t._v("增强方法")]),t._v("实现。")]),t._v(" "),s("h2",{attrs:{id:"_5-配置dockerfile构建镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-配置dockerfile构建镜像"}},[t._v("#")]),t._v(" 5.配置Dockerfile构建镜像")]),t._v(" "),s("p",[t._v("将打包好的Jar包传入服务器，通过构建镜像文件运行在docker上")]),t._v(" "),s("ul",[s("li",[t._v("步骤")])]),t._v(" "),s("p",[t._v("①将打包好的可执行jar包与Dockerfile传入服务器")]),t._v(" "),s("p",[t._v("②编写Dockerfile文件，其中常用指令：")]),t._v(" "),s("p",[s("strong",[t._v("ENV：指定容器启动后，所要执行指令的运行环境，配合外部传入")])]),t._v(" "),s("p",[s("strong",[t._v("FROM：指定基础镜像，必须为第一个命令")])]),t._v(" "),s("p",[s("strong",[t._v("ADD：将本地文件(jar包)添加到容器中")])]),t._v(" "),s("p",[t._v("WORKDIR：配置指定当前工作目录，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("后续所有指令(CMD)和操作都是把该目录作为相对路径。")])])],1),t._v(" "),s("p",[s("strong",[t._v("EXPOSE：配置镜像暴露的服务端口，一般配合host网络模式使用。(不配置host模式启动容器，会被-p接口映射覆盖")]),t._v(")")]),t._v(" "),s("p",[s("strong",[t._v("ENTRYPOINT  /  CMD：配置容器启动后，调用执行的命令。")])]),t._v(" "),s("div",{staticClass:"language-dockerfile line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基础镜像")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" openjdk:8-jdk-alpine")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 作者")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MAINTAINER")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"panhai"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 时区")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" TZ=PRC")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /usr/local/dockerfile")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加应用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" api-gateway-engine.jar /api-gateway-engine.jar")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行镜像")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" ["),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"java"')]),t._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-jar"')]),t._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/api-gateway-engine.jar"')]),t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("③编译Dockerfile文件，生成Docker镜像。其中后面的点表示从当前上下文相对路径获取。")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" ./Dockerfile "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" api-gateway-engine:1.0.1 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("④执行镜像，并暴露对应的端口给外部访问")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7397")]),t._v(":7397 "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8002")]),t._v(":8002  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--name")]),t._v(" api-gateway-engine "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" api-gateway-engine:1.0.1\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("不适用容器与宿主机自动映射，只当宿主机网络模式，宿主机EXPOSE暴露的端口会直接使用宿主机对应的端口")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--network")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--name")]),t._v(" api-gateway-engine "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" api-gateway-engine:1.0.1\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"_6-nettyserver-bind与docker虚拟网卡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-nettyserver-bind与docker虚拟网卡"}},[t._v("#")]),t._v(" 6.NettyServer#bind与Docker虚拟网卡")]),t._v(" "),s("p",[t._v("核心：在主机启动Netty服务端时，绑定IP地址设置为0.0.0.0，代表监听所有发往本地主机的请求。")]),t._v(" "),s("h4",{attrs:{id:"serverbootstrap-bind"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#serverbootstrap-bind"}},[t._v("#")]),t._v(" ServerBootstrap#bind")]),t._v(" "),s("p",[t._v("①一台机器上可能会有多张网卡，通过"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("ifconfig查看当前机器的所有网卡配置")])]),t._v("。")],1),t._v(" "),s("p",[t._v("②在程序中"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("Netty服务端绑定的IP只能是其所在机器中(ifconfig所能感知到)的某个网卡的IP地址。")])])],1),t._v(" "),s("p",[t._v("③Netty通过bind绑定的地址，是指服务端能够监听到**"),s("font",{attrs:{color:"blue"}},[t._v("目的地IP为所绑定网卡地址的IP包**")]),t._v("。比如你的主机有网卡A和B，程序中bind(A)，那么"),s("strong",[t._v("操作系统就会把所有发往A网卡地址的IP包数据，从内核态复制到用户态，转发给程序使用。")])],1),t._v(" "),s("p",[t._v("④如果bind绑定0.0.0.0，那么"),s("font",{attrs:{color:"red"}},[t._v("Netty服务端"),s("strong",[t._v("可以监听并收到")]),t._v("外部发给你主机上任意一张网卡的请求。")])],1),t._v(" "),s("h4",{attrs:{id:"docker上启动netty服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker上启动netty服务"}},[t._v("#")]),t._v(" Docker上启动Netty服务")]),t._v(" "),s("ul",[s("li",[t._v("环境")])]),t._v(" "),s("p",[t._v("虚拟机(宿主机)的IP为192.168.200.200")]),t._v(" "),s("ul",[s("li",[t._v("问题排查与实验")])]),t._v(" "),s("p",[t._v("①bind绑定192.168.200.200：网关引擎在宿主机直接java -jar可以正常运行，并且外部可通过192.168.200.200访问RPC服务。但是放进宿主机的docker后网关引擎启动失败。")]),t._v(" "),s("p",[t._v("②bind绑定127.0.0.1：网关引擎在宿主机和docker都可以正常启动，但是外部通过宿主机IP或是127.0.0.1都无法访问网关通信组件，获取RPC服务。(-p和host模式两种容器启动方法都尝试过，均访问不到)")]),t._v(" "),s("ul",[s("li",[t._v("结论")])]),t._v(" "),s("p",[t._v("①实验一说明"),s("strong",[t._v("容器内部感知不到宿主机的网卡IP")]),t._v("，进入容器内部通过ifconfig查看也验证了这个想法。docker内部只能感知到自己的"),s("strong",[t._v("虚拟网卡(eth0)")]),t._v("，因此Netty服务端不能正常启动。")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-it")]),t._v(" api-gateway-engine "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230515/Snipaste_2023-04-27_13-31-13.fvayxpoqiu8.webp",alt:"Snipaste_2023-04-27_13-31-13"}})]),t._v(" "),s("p",[t._v("②实验二的结论就很好体现了对bind的理解，"),s("strong",[t._v("docker内部bind监听环回地址相当于禁止外部访问")]),t._v("，除非请求也是在容器内部进行或者配置响应的host映射，否则Netty都监听不到外部的请求。")]),t._v(" "),s("p",[t._v("③综上，此处给出的方案是算力节点的启动Netty服务时，"),s("strong",[t._v("监听的IP地址设置为0.0.0.0")]),t._v("。")]),t._v(" "),s("p",[t._v("④虚拟机内部gateway-assist向外部windows环境下的gateway-center拉取服务时，ip不能够为localhost。宿主机与外部环境进行通信时需要访问"),s("strong",[t._v("外部ip")]),t._v("，也就是注册中心的IP需要改为虚拟机IP。")]),t._v(" "),s("ul",[s("li",[t._v("关于Docker与Vmware")])]),t._v(" "),s("p",[t._v("虚拟机端口转发：访问本机端口时，配置"),s("strong",[t._v("所要转发给虚拟机的IP端口")]),t._v("。从而实现外网(访问本体某个端口)访问内网虚拟机。")]),t._v(" "),s("p",[s("strong",[t._v("-it：docker run的参数，表示交互式运行，配合/bin/bash进行命令行输入")])]),t._v(" "),s("p",[t._v("容器之间进行访问通过docker0网球进行："),s("a",{attrs:{href:"https://blog.csdn.net/weixin_40008566/article/details/109906688",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker 查看虚拟网卡"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("虚拟机三种连接方式："),s("a",{attrs:{href:"https://www.cnblogs.com/yunjisuanchengzhanglu/p/16051416.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("虚拟机三种网络连接方式"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_7-redis发布订阅实现算力自动注册rpc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-redis发布订阅实现算力自动注册rpc"}},[t._v("#")]),t._v(" 7.Redis发布订阅实现算力自动注册RPC")]),t._v(" "),s("ul",[s("li",[t._v("功能实现")])]),t._v(" "),s("p",[t._v("目前整个网关系统启动需要遵循以下顺序：①注册中心②RPC应用提供③网关算力引擎。也就是说后续有新的应用接口暴露服务后，"),s("strong",[t._v("不会被算力引擎存入缓存")]),t._v("，也就使用不了整个网关调用服务。解决的关键点是engine如何感知到每个provider提供的服务。")]),t._v(" "),s("p",[t._v("长轮询、长链接方案：①网关引擎在Spring生命周期初始化中，另起一个线程，"),s("strong",[t._v("在后台while(true)不断重复拉取所有服务")]),t._v("，并存入缓存。显然不论是对于网关引擎还是注册中心都消耗占用不少资源。\n②网关引擎再启动一个Netty服务端(监听端口不能和已有网关通信服务监听端口相同)，注册中心"),s("strong",[t._v("启动一个Netty客户端和engine建立连接")]),t._v("，每次有新的服务接口注册进来后，通过管道writeAndFlush(systemId)通知服务端，拉取注册新的接口。"),s("strong",[t._v("但维持这样的长链接也会占用不少资源。")])]),t._v(" "),s("p",[t._v("最佳实践：使用"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("事件发布订阅机制异步进行")])]),t._v("，比如redis、MQ，这里"),s("strong",[t._v("网关引擎")]),t._v("与"),s("strong",[t._v("注册中心")]),t._v("采用"),s("strong",[t._v("redis的发布订阅模式")]),t._v("进行通信。新的应用接口启动注册后，触发注册中心的事件发布机制，gateway-center向网关引擎"),s("strong",[t._v("推送新注册接口的信息")]),t._v("，gateway-assist收到后进行更新。")],1),t._v(" "),s("p",[t._v("此处每启动一个新的provider注册进数据库时，都是以systemId为单位，"),s("strong",[t._v("assist注册时需要保存应用下的所有接口+所有方法")]),t._v("。因此"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("事件推送时仅需要传递systemId即可。")])]),t._v("而后续如果细化到只注册某个方法时，addmapper也需要细化拆分注册不同的模块。")],1),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230515/redis.1zu691y6pp34.webp",alt:"redis"}})]),t._v(" "),s("ul",[s("li",[t._v("细节")])]),t._v(" "),s("p",[t._v("GatewayApplication#addMappers：因为向Configuration注册需要"),s("strong",[t._v("复用")]),t._v("，所以可以抽离注册模块成一个方法。")]),t._v(" "),s("p",[t._v("queryApplicationSystemRichInfo(String gatewayId, String systemId)：此处在方法复用上的设计十分巧妙。因为第一次注册时需要拉取网关下注册的"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("所有应用接口")])]),t._v("，而第二次仅需要拉取"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("指定应用下的所有接口方法")])]),t._v("。"),s("strong",[t._v("因此传参时systemId为空，多加一次网关应用分配信息的查询；而第二次注册直接指定变化的systemId。")])],1),t._v(" "),s("p",[t._v("Center-RpcRegisterManage#registerEvent：消息事件发布，由sdk触发调用。")]),t._v(" "),s("p",[t._v("Assist-GatewayApplication#receiveMessage：指定的消息监听方处理器方法，"),s("strong",[t._v("入参为推送的消息内容")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("redis消息订阅发布")])]),t._v(" "),s("p",[t._v("①redis事件发布端：")]),t._v(" "),s("p",[t._v("redistemplate：通过配置方式注入Bean，设置默认序列化器fastjsonredisserializer，入参自动注入RedisConnectionFactory根据yml配置的redis端口建立链接。")]),t._v(" "),s("p",[t._v("RedisTemplate#convertAndSend：发布消息，指明接收方Topic通信信道，和消息内容。")]),t._v(" "),s("p",[t._v("②redis监听器：")]),t._v(" "),s("p",[s("strong",[t._v("RedisConnectionFactory：负责设置连接参数，redis服务地址。")])]),t._v(" "),s("p",[t._v("注入连接工厂Bean并修改配置，从注册中心拉取redis的端口IP信息(properties)，创建Jedis客户端连接(不需要在assist重新配置redis服务地址)。")]),t._v(" "),s("p",[s("strong",[t._v("RedisMessageListenerContainer")]),t._v("：注入消息监听器容器，需要设置"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("连接工厂")])]),t._v("和"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("监听器适配器")])]),t._v("。并将"),s("strong",[t._v("消息通信"),s("font",{attrs:{color:"red"}},[t._v("Topic")]),t._v("与监听器适配器绑定")],1),t._v("。")],1),t._v(" "),s("p",[s("strong",[t._v("MessageListenerAdapter")]),t._v("：指明"),s("strong",[t._v("消息处理委托对象")]),t._v("，以及"),s("strong",[t._v("消息处理方法(最终发布方的消息会被该方法接收)")]),t._v("。")])])}),[],!1,null,null,null);s.default=n.exports}}]);