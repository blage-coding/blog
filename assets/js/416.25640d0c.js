(window.webpackJsonp=window.webpackJsonp||[]).push([[416],{736:function(t,_,r){"use strict";r.r(_);var s=r(4),v=Object(s.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"xxl-job使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xxl-job使用"}},[t._v("#")]),t._v(" xxl-job使用")]),t._v(" "),_("p",[t._v("XXL-JOB是一个"),_("strong",[t._v("分布式任务调度平台")]),t._v("，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。")]),t._v(" "),_("h2",{attrs:{id:"_1-使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用"}},[t._v("#")]),t._v(" 1.使用")]),t._v(" "),_("p",[_("strong",[t._v("admin调度中心")]),t._v("(可类比zk，nacos理解)和"),_("strong",[t._v("执行器")]),t._v("(一个项目、服务) 其中一个执行器可以配置执行多个"),_("strong",[t._v("job任务")]),t._v("(方法),添加执行任务只需要在在类的方法指定@JobHandler。然后在调度中心绑定执行器和任务时根据项目的配置和注解的字段对应匹配即可。 在调度中心中具体"),_("strong",[t._v("定时任务配置流程")]),t._v("：先配置执行器，每个执行器对应一组待执行的job任务——>添加执行任务("),_("strong",[t._v("JobHandler")]),t._v("需要与测试实例的@XxlJob注解名称相匹配)")]),t._v(" "),_("p",[t._v("xxljob"),_("strong",[t._v("注册方式如果选择自动注入,服务端又没有配置的话就会自动读取服务端的地址,手动录入就是手动输入服务端的地址,就是executor中配置的ip和port")]),t._v("。")]),t._v(" "),_("h2",{attrs:{id:"_2-spring整合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring整合"}},[t._v("#")]),t._v(" 2.spring整合")]),t._v(" "),_("ul",[_("li",[t._v("配置任务调度中心ip+端口")]),t._v(" "),_("li",[t._v("appname:当前项目名称")]),t._v(" "),_("li",[t._v("执行器ip（可不填")]),t._v(" "),_("li",[t._v("port执行器端口")]),t._v(" "),_("li",[t._v("logpath执行器运行日志文件存储磁盘路径")])])])}),[],!1,null,null,null);_.default=v.exports}}]);