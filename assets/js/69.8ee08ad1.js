(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{387:function(t,_,i){"use strict";i.r(_);var s=i(4),v=Object(s.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"_122-买卖股票的最佳时机ii"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_122-买卖股票的最佳时机ii"}},[t._v("#")]),t._v(" 122.买卖股票的最佳时机Ⅱ")]),t._v(" "),_("p",[t._v("给定一个数组 prices ，其中 prices[i] 表示股票第 i 天的价格。在每一天，你可能会决定购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以购买它，然后在 同一天 出售。返回 你能获得的 最大 利润 。")]),t._v(" "),_("blockquote",[_("p",[t._v("输入: prices = [7,1,5,3,6,4]\n输出: 7\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。")])]),t._v(" "),_("h2",{attrs:{id:"_1-贪心"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-贪心"}},[t._v("#")]),t._v(" 1.贪心")]),t._v(" "),_("p",[t._v("因为不限制股票购买次数，只要统计所有的上坡，最终得到的一定是利润最大的情况。对于num[ i ]而言，判断num[ i ]-num[ i-1 ]是否大于零，如果大于零则说明当前第i个元素位置是一个波峰的结尾。")]),t._v(" "),_("p",[t._v("注意：这里并不需要统计最低波峰波谷，"),_("strong",[t._v("只需要统计累加每一小段的上坡")]),t._v("。")]),t._v(" "),_("h2",{attrs:{id:"_2-动态规划"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-动态规划"}},[t._v("#")]),t._v(" 2.动态规划")]),t._v(" "),_("p",[t._v("通法：枚举股票每一种状态机，也就说对于每一个股票而言分为如下几种状态：")]),t._v(" "),_("ul",[_("li",[t._v("未持有股票\n"),_("ul",[_("li",[t._v("购买当前股票")]),t._v(" "),_("li",[t._v("空过")])])]),t._v(" "),_("li",[t._v("已经持有股票(在前面购入)\n"),_("ul",[_("li",[t._v("以当前股票价格卖出")]),t._v(" "),_("li",[t._v("空过")])])])])])}),[],!1,null,null,null);_.default=v.exports}}]);