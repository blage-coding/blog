(window.webpackJsonp=window.webpackJsonp||[]).push([[344],{663:function(t,s,a){"use strict";a.r(s);var n=a(4),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"lock并发锁原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lock并发锁原理"}},[t._v("#")]),t._v(" Lock并发锁原理")]),t._v(" "),s("p",[t._v("本章主要介绍：")]),t._v(" "),s("ul",[s("li",[t._v("Java并发包中锁的源码实现")]),t._v(" "),s("li",[t._v("并发锁API")])]),t._v(" "),s("h2",{attrs:{id:"lock接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lock接口"}},[t._v("#")]),t._v(" Lock接口")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("synchronized关键字")]),t._v(" "),s("th",[t._v("Lock接口")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("获取/释放锁")]),t._v(" "),s("td",[t._v("隐式")]),t._v(" "),s("td",[t._v("显示编程实现")])]),t._v(" "),s("tr",[s("td",[t._v("可重入")]),t._v(" "),s("td",[t._v("支持")]),t._v(" "),s("td",[t._v("ReentrantLock显式重入")])]),t._v(" "),s("tr",[s("td",[t._v("灵活性")]),t._v(" "),s("td",[t._v("差")]),t._v(" "),s("td",[t._v("支持中断获取锁，超时获取锁")])])])]),t._v(" "),s("p",[t._v("Lock常用的接口包括：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("void lock()：获取锁。")])]),t._v(" "),s("li",[s("p",[t._v("boolean tryLock()：尝试非阻塞获取锁，立即返回。")])]),t._v(" "),s("li",[s("p",[s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("boolean tryLock(long time")])]),t._v(")：超时阻塞时获取锁。仅当①超时间内获取到锁②超时时间内被中断③到达超时时间三种情况下会返回。")],1)])]),t._v(" "),s("h2",{attrs:{id:"队列同步器aqs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列同步器aqs"}},[t._v("#")]),t._v(" 队列同步器AQS")]),t._v(" "),s("h3",{attrs:{id:"模板接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板接口"}},[t._v("#")]),t._v(" 模板接口")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("同步状态")]),t._v(" "),s("p",[t._v("同步状态可以理解为同步器的锁资源，多线程竞争Lock的锁资源实际上是在竞争AQS的“同步状态”。")]),t._v(" "),s("p",[t._v("用一个int整数存储表示，语义上可以理解为锁资源的大小、允许的并发度。")])]),t._v(" "),s("p",[t._v("AbstractQueuedSynchronizer(AQS)同步器提供了三个对“同步状态”操作的原子方法和查看锁占有线程的API：")]),t._v(" "),s("ul",[s("li",[t._v("getState()：获取当前同步状态")]),t._v(" "),s("li",[t._v("setState(int newState)：设置当前同步状态")]),t._v(" "),s("li",[t._v("compareAndSetState(int current , int update)：CAS更新当前状态。其中current表示当前getState结果。")]),t._v(" "),s("li",[s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("getExclusiveOwnerThread")])]),t._v("：返回当前独占锁的线程。")],1),t._v(" "),s("li",[s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("setExclusiveOwnerThread")])]),t._v("(thread)：设置当前占有锁的线程。")],1)]),t._v(" "),s("p",[t._v("AQS抽象类主要面向锁的开发者，基于模板模式，所提供的方法可以分为两类：")]),t._v(" "),s("ul",[s("li",[t._v("可重写方法：包括tryAcquire(),tryRelease()等。"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("基于上述三个原子操作对锁资源进行操作")])]),t._v("。")],1),t._v(" "),s("li",[t._v("模板方法：同步器定义好可以直接拿来使用，包括acquire(),release()...模板方法会调用上面重写的方法。")])]),t._v(" "),s("p",[s("font",{staticStyle:{background:"rgb(255, 240, 102)"}},[s("strong",[t._v("实现的锁接口方法中，需要调用AQS模板方法实现同步")])]),t._v("。基于同步器框架可以实现"),s("strong",[t._v("同步组件")]),t._v("，伪代码如下：")],1),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sync")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" 同步器 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重写同步器方法")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryAcquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" acquires"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sync")]),t._v(" sync"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//外部暴露的锁方法。实际上都通过调用上述代理的同步器对象的方法实现")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" sync"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sync "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryAcquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("显然用户在使用Lock锁对象时，并不会直接和同步器打交道。"),s("strong",[t._v("锁Lock负责与用户交互使用，而底层代码实际上是基于同步器框架实现的")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"同步器aqs源码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步器aqs源码实现"}},[t._v("#")]),t._v(" 同步器AQS源码实现")]),t._v(" "),s("p",[t._v("在AQS不同方法中，所谓死循环“自旋”分成以下两种：")]),t._v(" "),s("ul",[s("li",[t._v("模板方法：不断执行try方法尝试获取锁，根据try方法才能退出死循环")]),t._v(" "),s("li",[t._v("重写的try方法：锁可以获取的情况下重复执行CAS方法，直到成功修改同步状态位。无锁状态则不需要自旋。")])]),t._v(" "),s("h4",{attrs:{id:"_1-同步队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-同步队列"}},[t._v("#")]),t._v(" 1.同步队列")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20231015/image.6r0xj8ievl4.webp",alt:""}})]),t._v(" "),s("p",[t._v("内部依赖于自定义的Node数据结构，它是一个FIFO"),s("strong",[t._v("双向同步队列")]),t._v("，保存的节点是"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("获取同步状态失败的线程引用")])]),t._v("。")],1),t._v(" "),s("p",[t._v("同步器内维护队列的头节点和尾节点。队首node节点成功获取到同步状态后出队，并更新同步器的头节点。")]),t._v(" "),s("ul",[s("li",[t._v("队首元素更新不需要CAS，因为只会有一个元素能够获取同步状态。")]),t._v(" "),s("li",[t._v("队尾元素插入更新需要拿到CAS，因为同时会有多个元素同时竞争获取同步状态。")])]),t._v(" "),s("h4",{attrs:{id:"_2-独占式同步状态获取与释放"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-独占式同步状态获取与释放"}},[t._v("#")]),t._v(" 2.独占式同步状态获取与释放")]),t._v(" "),s("p",[t._v("独占式："),s("font",{attrs:{color:"red"}},[s("strong",[t._v("同一时刻只能有一个线程")])]),t._v("成功获取同步状态。通过同步器的"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("acquire")])]),t._v("原生方法实现，主要逻辑如下：")],1),t._v(" "),s("ol",[s("li",[t._v("执行重写的同步器方法"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("tryAcquire")])]),t._v("()，若获取失败则执行下面步骤。")],1),t._v(" "),s("li",[t._v("构造同步节点，并通过CAS加入同步队列的尾部。")]),t._v(" "),s("li",[t._v("节点调用"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("acquireQueued")])]),t._v("，进入自旋状态，以死循环+阻塞的方式尝试获取同步状态。只有前驱是头节点的节点才会尝试获取同步状态，从而保证FIFO的队列特性。以下两种情况被唤醒：\n"),s("ul",[s("li",[t._v("前驱节点出队列")]),t._v(" "),s("li",[t._v("阻塞线程被中断")])])],1)]),t._v(" "),s("p",[t._v("线程acquire拿到锁，并返回执行完相应逻辑后，需要释放同步状态并唤醒后继节点。")]),t._v(" "),s("h4",{attrs:{id:"_3-共享式同步状态获取与释放"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-共享式同步状态获取与释放"}},[t._v("#")]),t._v(" 3.共享式同步状态获取与释放")]),t._v(" "),s("p",[t._v("共享式："),s("font",{attrs:{color:"red"}},[s("strong",[t._v("同一时刻可以有多个线程")])]),t._v("同时获取到同步状态。通过同步器的"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("acquireShared")])]),t._v("原生方法实现。")],1),t._v(" "),s("p",[s("font",{staticStyle:{background:"rgb(255, 240, 102)"}},[s("strong",[t._v("共享式和独占式一样，如果锁获取失败，都会死循环自旋不断尝试获取同步状态")])]),t._v("。区别在于，共享式退出自旋的条件变为p.prev==head&&tryAcquireShared()>=0，重写方法tryAc返回值大于等于0表示能够获取到同步状态。")],1),t._v(" "),s("p",[t._v("“同步状态”释放时，"),s("strong",[t._v("会有多个线程同时释放锁，因此需要保证线程安全")]),t._v("。(独占式每次只有一个线程释放，不需要考虑线程安全)")]),t._v(" "),s("h4",{attrs:{id:"_4-独占式超时获取同步状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-独占式超时获取同步状态"}},[t._v("#")]),t._v(" 4.独占式超时获取同步状态")]),t._v(" "),s("p",[t._v("同步器原生方法"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("doAcquireNanos")])]),t._v("：核心逻辑与独占式和共享式类似。区别在于在自旋状态中，"),s("strong",[t._v("每轮循环会计算一次经过的时间间隔，并从超时时间nanosTimeout里面扣减")]),t._v("。如果当前超时时间被扣减到小于0，则说明当前超时，直接返回退出。")],1),t._v(" "),s("p",[t._v("若时间nanosTimeout比较短，则进入无条件的快速自旋。")]),t._v(" "),s("h3",{attrs:{id:"案例-自定义同步组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例-自定义同步组件"}},[t._v("#")]),t._v(" 案例——自定义同步组件")]),t._v(" "),s("p",[t._v("功能：同一时刻，只允许至多两个线程同时访问。超过两个线程的访问将会被阻塞。")]),t._v(" "),s("p",[t._v("基于上述API和接口，采用共享模式实现如下：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyLock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sync")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractQueuedSynchronizer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"count must larger than zero"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回更新后的同步状态值，小于0则表示获取失败")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryAcquireShared")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" reduceCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" reduceCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扣减失败，返回小于0的同步状态结果")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//大于0，则执行CAS成功后才进行扣减")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSetState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryReleaseShared")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" returnCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" returnCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSetState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sync")]),t._v(" sync "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sync"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquireShared")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sync"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("releaseShared")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br")])]),s("h2",{attrs:{id:"reentrantlock重入锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock重入锁"}},[t._v("#")]),t._v(" ReentrantLock重入锁")]),t._v(" "),s("p",[t._v("ReentrantLock锁主要包含如下特性：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("ReentrantLock是一个独占锁(排他锁)，仅允许一个线程同时持有锁。")])]),t._v(" "),s("li",[s("p",[t._v("ReentrantLock的"),s("strong",[t._v("同步状态state")]),t._v("语义上相当于一个"),s("font",{staticStyle:{background:"rgb(255, 240, 102)"}},[s("strong",[t._v("计数器，代表当前占有锁的线程重入的次数")])]),t._v("。")],1),t._v(" "),s("ul",[s("li",[t._v("state=0：代表当前锁没有线程占用，任何线程可以获取锁，"),s("strong",[t._v("需要CAS抢占锁")]),t._v("。")]),t._v(" "),s("li",[t._v("state=n：代表锁被某个线程重入了n次。")])])]),t._v(" "),s("li",[s("p",[t._v("重入性：占有锁的线程支持再次调用lock方法，"),s("strong",[t._v("重新获取锁进入同步块")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("公平性：先申请获取锁的请求优先被满足，获取锁的过程是顺序的。")])])]),t._v(" "),s("h3",{attrs:{id:"_1-重入性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-重入性"}},[t._v("#")]),t._v(" 1.重入性")]),t._v(" "),s("p",[t._v("重入性实现核心是通过getExclusiveOwnerThread判断当前线程是否为占有锁的线程，分为获取和释放两部分：")]),t._v(" "),s("ul",[s("li",[t._v("获取锁逻辑：首先判断当前同步状态，如果为0则直接抢占锁；若大于零，则判断线程是否为占用锁的线程，如果是同一个线程，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("累加同步状态计数器")])]),t._v("。")],1),t._v(" "),s("li",[t._v("释放锁逻辑："),s("font",{attrs:{color:"red"}},[s("strong",[t._v("同步状态计数器扣减当前释放线程数")])]),t._v("，当且仅当同步状态减到0才算真正的释放完毕，将锁占有线程置为空并返回true。")],1)]),t._v(" "),s("h3",{attrs:{id:"_2-公平锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-公平锁"}},[t._v("#")]),t._v(" 2.公平锁")]),t._v(" "),s("p",[t._v("ReentrantLock默认实现是非公平锁。公平锁能够实现"),s("font",{staticStyle:{background:"rgb(255, 240, 102)"}},[s("strong",[t._v("按照“请求顺序”获取锁，与AQS内部队列顺序保持一致")])]),t._v("。")],1),t._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("公平锁请求顺序")]),t._v(" "),s("p",[t._v("“请求顺序”是指多线程调用tryAcquire的顺序，它不等于AQS内部等待队列的顺序，也不等于代码执行顺序。")]),t._v(" "),s("p",[t._v("无论是公平锁还是非公平锁，如果所有线程都进入了等待队列，那么都必须按照AQS内部等待队列的顺序执行。")])]),t._v(" "),s("p",[t._v("当前可以获取锁时，CAS操作多加"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("hasQueuedPredecessors()")])]),t._v("判断条件，如果当前节点有前驱节点返回true，保证每个能够获取锁的一定是头结点，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("没有插队的线程")])]),t._v("。")],1),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasQueuedPredecessors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSetState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("而非公平锁，某一个时刻还没加入等待队列时tryacquire，如果当前正好锁释放了可以获取同步状态，"),s("strong",[t._v("那么当前线程无需加入等待队列阻塞")]),t._v("，直接拿锁返回，CPU无需唤醒其它线程。")]),t._v(" "),s("h3",{attrs:{id:"_3-公平锁和非公平锁对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-公平锁和非公平锁对比"}},[t._v("#")]),t._v(" 3.公平锁和非公平锁对比")]),t._v(" "),s("p",[t._v("💡对比实验需要死循环调用获取锁。若所有线程都进入同步队列，那么结果毫无意义，无法区分是否公平。")]),t._v(" "),s("ul",[s("li",[t._v("线程饥饿现象")])]),t._v(" "),s("p",[t._v("非公平锁中，刚释放完锁的线程即使处于队列尾部，也可能会立刻重新获取到锁，从而导致其它线程一直不能调度，"),s("strong",[t._v("出现”饥饿“的情况")]),t._v("。")]),t._v(" "),s("p",[t._v("而在公平锁中，刚释放的锁排在队尾，必定不能立刻重新获取锁。")]),t._v(" "),s("ul",[s("li",[t._v("上下文开销")])]),t._v(" "),s("p",[t._v("虽然非公平锁不能调度，但连续两次线程获取到线程，"),s("font",{staticStyle:{background:"rgb(255, 240, 102)"}},[s("strong",[t._v("不需要进行上下文切换，减少系统开销，吞吐和效率更高")])])],1),t._v(" "),s("p",[t._v("而反过来，公平锁实现FIFO的代价就是，进行大量上下文切换，开销大。")]),t._v(" "),s("h2",{attrs:{id:"reentrantreadwritelock读写锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reentrantreadwritelock读写锁"}},[t._v("#")]),t._v(" ReentrantReadWriteLock读写锁")]),t._v(" "),s("p",[t._v("读锁多个线程同时访问，写锁则只允许一个线程。两种实现方式：")]),t._v(" "),s("ul",[s("li",[t._v("基于wait/notify的等待通知机制，但是代码编程复杂")]),t._v(" "),s("li",[t._v("ReentrantReadWriteLock读锁和写锁，简单明了。")])]),t._v(" "),s("h3",{attrs:{id:"接口示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口示例"}},[t._v("#")]),t._v(" 接口示例")]),t._v(" "),s("p",[t._v("ReadWriteLock提供的API主要分为两类：")]),t._v(" "),s("ul",[s("li",[t._v("获取读写锁："),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("readLock(),writeLock()")])]),t._v("，返回Lock接口的引用，通过调用读写锁的lock,unlock方法实现读写并发控制。")],1),t._v(" "),s("li",[t._v("监控内部读写锁状态的方法：包括"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("getReadLockCount()")])]),t._v(","),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("isWriteLocked()")])]),t._v("...获取读锁次数，写锁是否获取。")],1)]),t._v(" "),s("h3",{attrs:{id:"源码分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源码分析"}},[t._v("#")]),t._v(" 源码分析")]),t._v(" "),s("h4",{attrs:{id:"_1-读写同步状态划分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-读写同步状态划分"}},[t._v("#")]),t._v(" 1.读写同步状态划分")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20231017/image.2o8v7250k3a0.webp",alt:""}})]),t._v(" "),s("p",[t._v("将同步状态按位切割，分别存储“"),s("strong",[t._v("读锁”的同步状态")]),t._v("，“"),s("strong",[t._v("写锁”的同步状态")]),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("写锁同步状态：state=0代表当前未获取，state>0代表线程"),s("strong",[t._v("重入")]),t._v("的次数。")]),t._v(" "),s("li",[t._v("读锁同步状态：state作为计数器记录当前获取读锁的线程数。")])]),t._v(" "),s("p",[s("font",{staticStyle:{background:"rgb(255, 240, 102)"}},[s("strong",[t._v("getState>0，写锁同步状态为0，那么可以推出一定有读锁同步状态大于0，当前处于读状态")])]),t._v("。")],1),t._v(" "),s("h4",{attrs:{id:"_2-写锁获取与释放"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-写锁获取与释放"}},[t._v("#")]),t._v(" 2.写锁获取与释放")]),t._v(" "),s("p",[t._v("写锁抢占获取逻辑如下：")]),t._v(" "),s("ul",[s("li",[t._v("如果读写同步状态大于0，分别判断读同步状态和写同步状态：\n"),s("ul",[s("li",[t._v("readState>0，则获取写锁失败。")]),t._v(" "),s("li",[t._v("writeState>0，则进行重入性判断，当前线程不是重入线程则失败。否则获取写锁成功。")])])]),t._v(" "),s("li",[t._v("同步状态等于0，则需要"),s("strong",[t._v("CAS")]),t._v("占用锁。")])]),t._v(" "),s("p",[t._v("写锁释放逻辑与ReentrantLock锁释放逻辑相似。")]),t._v(" "),s("h4",{attrs:{id:"_3-读锁获取与释放"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-读锁获取与释放"}},[t._v("#")]),t._v(" 3.读锁获取与释放")]),t._v(" "),s("p",[t._v("读锁获取逻辑：只要写状态为0，读状态大于0，则读锁总会被成功获取。"),s("strong",[t._v("另外如果当前线程获取了写锁，那么当他尝试获取读锁时，也能成功获取(降级)")]),t._v("。")]),t._v(" "),s("p",[t._v("读同步状态指的是，所有读线程重入读锁的次数之和。每个线程单独维护一个ThreadLocal对象，保存当前线程重入的次数之和。")]),t._v(" "),s("p",[t._v("读锁释放与ReentrantLock释放类似，需要CAS控制并发。")]),t._v(" "),s("h4",{attrs:{id:"_4-锁降级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-锁降级"}},[t._v("#")]),t._v(" 4.锁降级")]),t._v(" "),s("p",[t._v("锁降级指的是并发情况一种数据可见性控制策略，适用于特定的场景。")]),t._v(" "),s("ol",[s("li",[t._v("获取持有写锁")]),t._v(" "),s("li",[s("strong",[t._v("尝试获取读锁")])]),t._v(" "),s("li",[t._v("释放写锁")])]),t._v(" "),s("p",[t._v("其中中间这一步获取读锁，目的是为了保证数据的可见性。当前线程释放写锁后还持有读锁，这使得其它阻塞在写锁的线程仍然处于被阻塞的状态。"),s("font",{staticStyle:{background:"rgb(255, 240, 102)"}},[s("strong",[t._v("相当于延长了当前线程对数据一致性的控制周期")])]),t._v("。")],1),t._v(" "),s("h2",{attrs:{id:"locksupport工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#locksupport工具"}},[t._v("#")]),t._v(" LockSupport工具")]),t._v(" "),s("p",[t._v("定义了一组公共静态方法，用于控制线程阻塞和唤醒：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法名称")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("park()")]),t._v(" "),s("td",[t._v("阻塞当前线程")])]),t._v(" "),s("tr",[s("td",[t._v("unpark(thread)")]),t._v(" "),s("td",[t._v("唤醒处于阻塞状态的thread线程")])]),t._v(" "),s("tr",[s("td",[t._v("parkNanos(blocker,nanos)")]),t._v(" "),s("td",[t._v("blocker标识当前线程阻塞对象")])])])]),t._v(" "),s("h2",{attrs:{id:"condition接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#condition接口"}},[t._v("#")]),t._v(" Condition接口")]),t._v(" "),s("p",[t._v("监视器方法用于"),s("strong",[t._v("在锁同步块内实现线程的等待通知机制")]),t._v("，目前有两种实现方式：")]),t._v(" "),s("ul",[s("li",[t._v("Object对象的监视器方法：wait，notify,\tnotifyAll。与synchronized配合")]),t._v(" "),s("li",[t._v("Condition接口监视器方法：await。与Lock.lock配合")])]),t._v(" "),s("h3",{attrs:{id:"接口示例-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口示例-2"}},[t._v("#")]),t._v(" 接口示例")]),t._v(" "),s("p",[t._v("Condition对象在"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("await()")])]),t._v("阻塞和"),s("font",{staticStyle:{background:"rgb(240, 240, 236)"},attrs:{color:"#d94a33"}},[s("strong",[t._v("signal()")])]),t._v("通知线程时，必须先获取与其绑定的Lock锁对象。")],1),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lock")]),t._v(" lock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")]),t._v(" condition "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCondition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("conditionAwaitOrSignal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//阻塞当前线程")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//condition.signal(); 其它线程调用唤醒当前线程")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("和先前等待通知机制的三段式相同，"),s("font",{staticStyle:{background:"rgb(255, 240, 102)"}},[s("strong",[t._v("阻塞代码需要使用while而不是if，防止过早或者意外通知")])]),t._v("。")],1),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" addCondition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"源码分析-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源码分析-2"}},[t._v("#")]),t._v(" 源码分析")]),t._v(" "),s("p",[t._v("ConditionObject是AQS同步器的内部类，每个Condition对象都维护一个FIFO“等待队列”，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("每个节点都是在该Condition对象上等待的线程")])]),t._v("。")],1),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20231017/image.4xqzu2ajw380.webp",alt:""}})]),t._v(" "),s("p",[t._v("在AQS同步器+Condition模型的监视器模型中包含：")]),t._v(" "),s("ul",[s("li",[t._v("一个AQS同步队列")]),t._v(" "),s("li",[t._v("多个Condition等待队列")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20231017/image.11vjnxldytwg.webp",alt:""}})]),t._v(" "),s("p",[t._v("底层无论是await方法，还是signal方法，都用到了"),s("strong",[t._v("LockSupport")]),t._v("进行阻塞和唤醒节点线程：")]),t._v(" "),s("ol",[s("li",[t._v("await()：线程被Condition.await方法阻塞时，相当于将当前线程从AQS同步队列的头结点，移动到了Condition等待队列当中。")]),t._v(" "),s("li",[t._v("signal()：从Condition等待队列头节点移除，加入到同步队列中。再使用LockSupport唤醒(跳出await方法的while循环)，继续进行锁的竞争。")]),t._v(" "),s("li",[t._v("signalAll()：所有等待队列的节点都执行一次signal，移动到同步队列。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);