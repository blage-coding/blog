(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{401:function(t,n,_){"use strict";_.r(n);var i=_(4),s=Object(i.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_718-最长重复子数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_718-最长重复子数组"}},[t._v("#")]),t._v(" 718.最长重复子数组")]),t._v(" "),n("p",[t._v("给两个整数数组 "),n("code",[t._v("A")]),t._v(" 和 "),n("code",[t._v("B")]),t._v(" ，返回两个数组中公共的、长度最长的子数组的长度。")]),t._v(" "),n("blockquote",[n("p",[t._v("输入：\nA: [1,2,3,2,1]\nB: [3,2,1,4,7]\n输出：3\n解释：长度最长的公共子数组是 [3, 2, 1] 。")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("这道题目不能用首尾指针方法的原因在于，尾指针不只是和另一个尾指针匹配，"),n("strong",[t._v("和另一个数组指针区间中的任何一个元素匹配都有可能改变当前最长重复子序列长度")]),t._v("，也是这道题目的难点，如果考虑让尾指针和每一个元素遍历就是暴力的思想。")])]),t._v(" "),n("li",[n("p",[t._v("滑动指针对齐法。"),n("strong",[t._v("每一次固定两个数组的头，匹配两个数组长度重合的队列，遍历时两个数组的指针只需要同步移动")]),t._v("，这也是固定头部对齐的好处，不需要交错匹配。最长重复队列一定会在移动到某个位置时，被一对一同步上下匹配。如果把B作为固定串(相当于隧道)，A作为滑动串(火车),那么对齐时一定是从A刚进去隧道到A完全出隧道，长度为O(m+n)。时间复杂度O((m+n)*min(m,n))"),n("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230516/fbc3d75b4a3d465e9be411a615e8b752.2onjcola06g0.webp#pic_center",alt:"在这里插入图片描述"}})])]),t._v(" "),n("li",[n("p",[t._v("动规。dp[i][j]表示"),n("strong",[t._v("以A[i]和B[j]元素为结尾")]),t._v("的最长重复子数组的长度。这道题又增加了我们对于dp数组含义设计的理解，一道动规题目一般来说要用dp来解决，那么"),n("strong",[t._v("对dp[i][j]进行状态转移时，肯定是只涉及到对i和j下标附近元素的访问和比较")]),t._v("(A[i-1],A[i],A[i+1]),因此我们设计dp数组时，每次维护dp[i][j]时"),n("strong",[t._v("添加的元素肯定只能是A[i]和B[j]")]),t._v("。所以回到这道题目，如果我们直接设计dp[i][j]表示长度为i和长度为j数组的最长重复数组"),n("strong",[t._v("长度")]),t._v("，是肯定不行的，因为A[i]和B[0]~B[j-1]任意一个元素匹配都有可能改变重复数组长度。")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);