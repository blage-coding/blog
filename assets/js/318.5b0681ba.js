(window.webpackJsonp=window.webpackJsonp||[]).push([[318],{636:function(e,t,a){"use strict";a.r(t);var s=a(4),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"源码分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#源码分析"}},[e._v("#")]),e._v(" 源码分析")]),e._v(" "),t("h2",{attrs:{id:"springbootapplication"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication"}},[e._v("#")]),e._v(" @SpringBootApplication")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("@SpringBootConfiguration：底层实际上是一个@Configuration")])]),e._v(" "),t("li",[t("p",[e._v("@ComponentScan：包扫描")])]),e._v(" "),t("li",[t("p",[e._v("@EnableAutoConfiguration:根据每个包下面的metaInfo自动导入自动配置类=>个别配置类注解了条件生效条件，满足IOC中存在某个Bean才生效=>给容器中装配组件。")]),e._v(" "),t("p",[e._v("使用@condition注解实现给bean对象修改id")]),e._v(" "),t("p",[t("font",{attrs:{color:"red"}},[t("strong",[e._v("用户若要使用自己的配置，则直接@Bean重新配置一个方法替换底层组件=>然后查看这个组件的配置类xxxProperties(EnableConfigurationProperties可以看到)，根据配置类的prefix+类属性名修改")])])],1)])]),e._v(" "),t("h2",{attrs:{id:"restcontroller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#restcontroller"}},[e._v("#")]),e._v(" @RestController")]),e._v(" "),t("ul",[t("li",[t("p",[e._v('SpringMVC 默认实现了HiddenHttpMethodFilter来支持RestFul风格，SpringBoot使用时首先需要在yaml中开启filter功能(默认不开启)，然后在前端form表单input添加一个隐藏变量name="_method"，然后填写真正的请求方式value="delete"')]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('spring:\n  mvc:\n    hiddenmethod:\n      filter:\n        enabled: true\n------------------\n<form method="post">\n<input type="hidden" name="_method" value="delete">\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v("表单发送请求(只有表单请求才会转换)流程：被过滤器拦截—>检查是否是post方式—>"),t("font",{attrs:{color:"red"}},[t("strong",[e._v("获取_method值，然后重新包装一个RequestWrapper对象(实现了HttpServletRequest接口)，传入_method重写了getMethod方法，包装模式—>过滤器放行这个新的HttpServletRequest(wrapper)")])]),e._v("。")],1)]),e._v(" "),t("li",[t("p",[e._v("请求映射原理")]),e._v(" "),t("p",[e._v("handleMapping(RequestMapping，WelcomeMapping...)，遍历每个handleMapping看哪个能处理(根据里面的一个配置中心，里面保存我们写过的映射规则)。")]),e._v(" "),t("p",[e._v("DispatcherServlet.doDistpatch：初始化各种参数—>从handleMappings中getHandler找能处理的映射—>然后找对应的处理方法，先根据request方法的url路径找，再根据method找，最终找到一个对应的处理方法(handler)。")])])]),e._v(" "),t("h2",{attrs:{id:"请求参数处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求参数处理"}},[e._v("#")]),e._v(" 请求参数处理")]),e._v(" "),t("p",[e._v("找到handle后，找到对应的handleAdapter适配器——>执行目标方法(使用参数解析器确定要执行的目标方法每一个参数是什么—>反射doinvoke调用处理方法)")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("参数解析器")]),e._v("：遍历所有参数解析器，找到支持解析该参数的参数解析器("),t("strong",[e._v("实际上就是看是不是标了对应的注解")]),e._v(")，把对应参数和解析器丢到缓存中，然后开始解析。")]),e._v(" "),t("li",[e._v("参数解析过程：根据参数名，调用servlet一些原生的方法，比如request.getAttribute")]),e._v(" "),t("li",[e._v("具体参数类型分析：\n"),t("ul",[t("li",[e._v("model：model的addAttribute最终相当于底层request.setAttribute往请求域中放数据。")]),e._v(" "),t("li",[e._v("VIew：视图名")])])])]),e._v(" "),t("h2",{attrs:{id:"视图解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视图解析"}},[e._v("#")]),e._v(" 视图解析")]),e._v(" "),t("p",[e._v("render(mv)页面渲染：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("首先根据View的名字，遍历所有view解析器，看哪一个解析器能根据当前返回值得到View对象")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("forward开头，则底层调用response.getRequestDispatcher转发")])]),e._v(" "),t("li",[t("p",[e._v("redirect开头，render底层就是重定向,new RedirectView()")])]),e._v(" "),t("li",[t("p",[e._v("普通字符串开头，则返回new ThymeleafView()")])])])]),e._v(" "),t("li",[t("p",[e._v("然后调用这个视图对象View自己定义的render进行页面渲染(底层原生servlet方法)。")])])]),e._v(" "),t("h2",{attrs:{id:"拦截器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拦截器"}},[e._v("#")]),e._v(" 拦截器")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("根据当前请求找到handlerExecutionChain处理器执行链,其中这个处理器请求链对象包含①handler对象，里面指明了由哪个方法处理当前请求②InterceptorList拦截器链包含所有拦截器")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[e._v("mappedHandler "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("getHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("processedRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230515/image-20221214100231957.4dllztciav80.webp",alt:"image-20221214100231957"}})])]),e._v(" "),t("li",[t("p",[e._v("根据handler获取目标方法的适配器")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HandlerAdapter")]),e._v(" ha "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("getHandlerAdapter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("mappedHandler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("getHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])]),e._v(" "),t("li",[t("p",[e._v("在通过handler适配器调用执行handler方法(controller方法)之前，会执行拦截器调用applyPreHandle方法，"),t("strong",[e._v("如果返回false，则直接跳出doDIspatcher方法，后面的handler不执行")]),e._v("。")]),e._v(" "),t("ul",[t("li",[e._v("applyPreHandle：先遍历所有拦截器，"),t("strong",[t("font",{attrs:{color:"red"}},[e._v("顺序执行prehandler")])],1),e._v("，返回true放行，则继续执行下一个拦截器的prehandler方法；如果prehandler返回false，则直接触发执行triggerAfterCompletion的方法，执行完后返回false。")]),e._v(" "),t("li",[e._v("afterCompletion：从当前没有放行的拦截器开始，倒序(i--)执行所有已经执行prehandler拦截器的afterComletion方法")])]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("mappedHandler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("applyPreHandle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("processedRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])])]),e._v(" "),t("li",[t("p",[e._v("所有拦截器的prehandler方法都正常放行，ha.handler处理器方法执行完之后，调用applyPostHandle**"),t("font",{attrs:{color:"red"}},[e._v("倒序执行所有拦截器postHandler")]),e._v("**方法(遍历拦截器列表i--)，若有某个拦截器不放行，则处理规则同上。")],1),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("mappedHandler.applyPostHandle(processedRequest, response, mv);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])]),e._v(" "),t("li",[t("p",[e._v("执行render渲染完页面后，触发执行triggerAfterCompletion。")])])]),e._v(" "),t("p",[e._v("整个流程如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230515/image-20221214103921153.5llp711nsys0.webp",alt:"image-20221214103921153"}})])])}),[],!1,null,null,null);t.default=n.exports}}]);