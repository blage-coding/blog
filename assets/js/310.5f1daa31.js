(window.webpackJsonp=window.webpackJsonp||[]).push([[310],{629:function(t,a,e){"use strict";e.r(a);var n=e(4),s=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[t._v("#")]),t._v(" AOP")]),t._v(" "),a("h2",{attrs:{id:"_1-基于动态代理实现aop切面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基于动态代理实现aop切面"}},[t._v("#")]),t._v(" 1.基于动态代理实现AOP切面")]),t._v(" "),a("p",[t._v("功能：实现AOP的核心是通过利用动态代理的方法增强实现。"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("在InvocationHandler接口的invoke方法(MethodInterceptor接口的intercept方法)中实现对切面方法的拦截处理。")])])],1),t._v(" "),a("ul",[a("li",[t._v("动态代理")])]),t._v(" "),a("p",[t._v("①jdk动态代理：Proxy.newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)创建代理对象。其中第二个参数指明需要增强的类都实现了"),a("strong",[t._v("哪些接口,或哪些父类")]),t._v("。"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("通过jdk代理调用的所有接口方法，都会进入到InvocationHandler接口的invoke中执行增强")])]),t._v("。")],1),t._v(" "),a("p",[t._v("②Cglib代理：通过Enhancer对象和配置对应的参数创建代理对象。setSuperclass表示所要代理对象的Class，setInterfaces设置代理对象实现的一组接口，setCallback设置调用目标方法前执行的"),a("strong",[t._v("回调拦截器MethodInterceptor")]),t._v(",所有代理对象方法执行都会进入"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("intercept方法进行增强")])]),t._v("。")],1),t._v(" "),a("p",[t._v("③Cglib和jdk代理两者区别在于，jdk代理只能代理实现类的"),a("strong",[t._v("接口方法")]),t._v("(第二个参数interfaces)，而Cglib代理对象可以是一个"),a("strong",[t._v("实现类")]),t._v(",对于"),a("strong",[t._v("实现类以及接口的所有方法都能够感知并拦截")]),t._v("。")]),t._v(" "),a("p",[t._v("此外两种代理方式的方法增强最终都是通过调用"),a("strong",[t._v("方法拦截器MethodInterceptor")]),t._v("的invoke方法，并传入"),a("strong",[t._v("MethodInvocation")]),t._v("类型对象(重写proceed方法实现拦截方法放行，可以修改方法参数)。但是区别在于Cglib所有方法的invoke是通过MethodProxy方法代理对象进行，而jdk代理在封装类ReflectiveMethodInvocation中通过Method.invoke放行。")]),t._v(" "),a("ul",[a("li",[t._v("架构设计")])]),t._v(" "),a("p",[t._v("要实现AOP切面和动态代理方法的解耦，关键是要抽离各自的方法和职能。关于动态代理类，只暴露代理方法进行调用的api，同时考虑到不同的代理方法需要提供统一的代理对象创建方法。而对于AOP切面类，需要完成拦截方法的判断、用户自定义拦截方法的织入、代理对象封装("),a("strong",[t._v("invoke形参Object只能拿到CGLib动态生成的代理类实例，而不是代理的对象")]),t._v(")等等。")]),t._v(" "),a("p",[t._v("用户定义拦截器时，需要①自定义拦截类，实现拦截接口②指定切面方法③"),a("strong",[t._v("通过代理对象调用切面方法，触发拦截器")]),t._v("。")]),t._v(" "),a("p",[t._v("此处用户使用AOP还存在冗余的地方，首先自定义的拦截器还需要手动编程加入到切面封装类，此外用户触发拦截需要手动创建封装的代理对象(而不是通过从Spring容器中取出Bean调用就可以触发)。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230514/image-20230412140643768.1d25ye31xvs0.webp",alt:"image-20230412140643768"}})]),t._v(" "),a("h2",{attrs:{id:"_2-将aop扩展到bean生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-将aop扩展到bean生命周期"}},[t._v("#")]),t._v(" 2.将AOP扩展到Bean生命周期")]),t._v(" "),a("p",[t._v("功能：将创建AOP代理实例的过程扩展到Spring容器"),a("strong",[t._v("每个Bean")]),t._v("的生命周期中。")]),t._v(" "),a("ul",[a("li",[t._v("架构设计")])]),t._v(" "),a("p",[t._v("因为只有通过动态代理创建的Bean对象才具有AOP拦截功能，所以"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("需要在createBean中创建实例之前判断用户在哪些Bean中创造了切点，这些Bean需要通过动态代理工厂创建对象。")])]),t._v("而区分普通Bean和代理Bean是"),a("strong",[t._v("通过切面包装类的classFilter类拦截器匹配实现")]),t._v("。因为切面包装对象中包含拦截器方法对象，故"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("切面包装类+切面方法类都要在spring.xml配置(一对一关系)，交给容器管理")])]),t._v("。")],1),t._v(" "),a("p",[a("strong",[t._v("DefaultAdvisorAutoProxyCreator")]),t._v("实现了BeanPostProcessor接口和Aware接口，在进行拦截类匹配之前，通过getBeansOfType方法把切面包装类对象放入缓存(这里"),a("strong",[t._v("扩大了BeanPostProcessor增强方法的职能范围")]),t._v("，不仅限于初始化前，实例化前也可以)。")]),t._v(" "),a("p",[t._v("注意：虽然整个拦截匹配过程可以直接封装一个方法(直接用getBeansOfType预加载)，直接在createBean开头调用，没必要封装一个类，但实际上是做不到的。因为AbstractAutowireCapableBeanFactory是DefaultListableBeanFactory的父类，它拿不到子类的getBeansOfType方法和beanDefinitionMap对象的，也就不能进行切面类预加载。这就是为什么"),a("strong",[t._v("DefaultAdvisorAutoProxyCreator")]),t._v("要"),a("strong",[t._v("实现工厂容器感知接口")]),t._v("的原因。")]),t._v(" "),a("ul",[a("li",[t._v("细节")])]),t._v(" "),a("p",[t._v("AspectJExpressionPointcutAdvisor：Pointcut用于获取切面，而 Advice切面方法决定执行的拦截操作。")]),t._v(" "),a("p",[t._v("MethodBeforeAdviceInterceptor：定义"),a("strong",[t._v("切面拦截器")]),t._v("。代理对象触发拦截时具体的调用链：")]),t._v(" "),a("p",[t._v("MethodBeforeAdviceInterceptor#invoke——>UserServiceBeforeAdvice#before+MethodInvocetion#proceed")]),t._v(" "),a("p",[t._v("DefaultAdvisorAutoProxyCreator：可以定义一个切面包装类缓存List<AspectJExpressionPointcutAdvisor>,每次对当前Bean进行拦截判断时，直接从缓存取出切面进行匹配。")]),t._v(" "),a("p",[a("strong",[t._v("动态代理实例")]),t._v("所代理的"),a("strong",[t._v("对象")]),t._v("通过beanClass反射使用无参构造器来创建。")]),t._v(" "),a("p",[t._v("拦截方法类+切面包装类+自动代理创建类都需要定义无参构造方法，否则Spring创建实例时找不到无参构造器会报错。")]),t._v(" "),a("p",[t._v("存在的问题：如果同个方法被多个AOP拦截，那么就会对该目标类重复生成多个AOP代理对象。此处没有解决AOP代理嵌套问题。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230514/image-20230412220109818.5xwl9vrd3eo0.webp",alt:"image-20230412220109818"}})]),t._v(" "),a("h2",{attrs:{id:"_3-包扫描与占位符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-包扫描与占位符"}},[t._v("#")]),t._v(" 3.包扫描与占位符")]),t._v(" "),a("ul",[a("li",[t._v("使用占位符对property属性值填充")])]),t._v(" "),a("p",[t._v("功能：Bean配置property的属性值value时，用户希望从一个统一的资源文件读取。占位符作用是"),a("strong",[t._v("将properties文件配置值引入到Bean的属性配置中，也就是对BeanDefinition的信息进行修改")]),t._v("。两种方案，一种直接在解析XML文件过程中添加对占位符value的过滤操作，问题在于添加后XML解析过程的耦合度增加。基于职权分离解耦的思想，这里"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("采用BeanFactoryPostProcessor实现占位符的替换")])]),t._v("，只要在Bean实例化之前完成对BeanDefinition的修改和填充都是可以的。")],1),t._v(" "),a("p",[a("strong",[t._v("PropertyPlaceholderConfigurer")]),t._v(" ：①实现了BeanFactoryPostProcessor接口，因此需要在spring.xml添加配置Bean,同时"),a("strong",[t._v("指定占位符填充资源文件的路径location")]),t._v("。②Bean定义修改方法中，获取location资源文件的输入流并加载资源，通过getProperty拿到真正的字段值。注意完成修改后"),a("strong",[t._v("需要删掉BeanDefinition中含有占位符的PropertyValue")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("包扫描+@Component实现自动装配")])]),t._v(" "),a("p",[t._v("功能：配置包扫描注册bean的功能。核心在于通过Hutool包的"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("ClassUtil.scanPackageByAnnotation方法，可以返回指定包下含有指定注解的所有Class对象。")])]),t._v("并把整个"),a("strong",[t._v("包扫描过程添加到XML解析过程doLoadBeanDefinitions")]),t._v("中。"),a("strong",[t._v("对扫描到的每个类创建对应的BeanDefinition")]),t._v("。")],1),t._v(" "),a("p",[t._v("ClassPathBeanDefinitionScanner#doScan：①获取指定包名下的所有Component注解的Class对象②Scope注解解析，判断Bean作用域③初始化BeanName(优先component指定，没有则初始化为类名首字母小写)④封装BeanDefinition并加入Bean工厂集合中。")]),t._v(" "),a("p",[t._v("问题：包扫描方式实际上开启了注解开发的模式。因为包扫描方式不能指定Bean的初始化属性以及初始化方法，仅仅只是根据无参构造器进行实例化。想要进一步给Bean添加定制化服务，只能通过注解的方法。")]),t._v(" "),a("h2",{attrs:{id:"_4-autowired注解注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-autowired注解注入"}},[t._v("#")]),t._v(" 4.Autowired注解注入")]),t._v(" "),a("p",[t._v("功能：解决包扫描自动注册Bean的"),a("strong",[t._v("属性注入")]),t._v("问题。对象类型通过@Autowired注入，而具体"),a("strong",[t._v("注入的对象通过getBean获取")]),t._v("(Autowired是ByType获取，因此需要另外封装一个getBean方法)。属性值注入通过@Value注入，"),a("strong",[t._v("通过容器的字符串解析器解析配置文件获取")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("架构设计")])]),t._v(" "),a("p",[t._v("AutowiredAnnotationBeanPostProcessor：属性注入、对象注入需要在对象属性填充applyPropertyValues之前进行。因此"),a("strong",[t._v("属性注入类")]),t._v("需要实现InstantiationAwareBeanPostProcessor接口(此处BeanPostProcessor的方法执行时机已经不是狭义的Bean初始化前后了，而是"),a("strong",[t._v("扩大到createBean整个生命周期")]),t._v(")。")]),t._v(" "),a("p",[t._v("StringValueResolver：Spring把"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("从配置文件中解析占位符字段属性值")])]),t._v("这一操作方法抽象出来，创建字符串解析器集合，用于解析不同类型资源的字符串。在"),a("strong",[t._v("BeanFactoryPostProcessor")]),t._v("修改定义方法中，"),a("strong",[t._v("处理解析XML的占位符")]),t._v("后将"),a("strong",[t._v("占位符解析器")]),t._v("加入到Spring的"),a("strong",[t._v("字符串解析器")]),t._v("缓存中，给后续在Bean属性填充前解析@Value使用。")],1),t._v(" "),a("ul",[a("li",[t._v("细节")])]),t._v(" "),a("p",[t._v("如果一个类用上了@Inherited修饰的注解，那么其子类也会继承这个注解。")]),t._v(" "),a("p",[t._v("@Qualifier指明BeanName按名注入，解决容器中有多个相同类型的对象的注入问题。")]),t._v(" "),a("p",[t._v("postProcessPropertyValues在执行属性注入前，需要检查Spring实例化的对象是否为CGlib的对象，否则不能正确获取到对象的Field。")]),t._v(" "),a("p",[t._v("此处区分两个属性注入：")]),t._v(" "),a("p",[t._v("①XML配置文件的占位符属性注入：执行时机为BeanFactoryPostProcessor修改Bean定义中进行，这里"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("注入填充的实际上是BeanDefinition中的value值")])]),t._v("。")],1),t._v(" "),a("p",[t._v("②类内部@Value注解的属性实现注入：执行时机是在Bean声明周期的属性填充之前进行，此处"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("注入的对象是Bean的实例化对象，通过反射设置对象的属性值")])]),t._v("。")],1),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230514/image-20230413201640749.2f0g9q2gxku8.webp",alt:"image-20230413201640749"}})]),t._v(" "),a("h2",{attrs:{id:"_5-aop代理对象属性注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-aop代理对象属性注入"}},[t._v("#")]),t._v(" 5.AOP代理对象属性注入")]),t._v(" "),a("ul",[a("li",[t._v("功能")])]),t._v(" "),a("p",[t._v("createBean中AOP代理实例最先解析创建并返回，后续的XML属性、自动注入属性这些步骤都不会进行。因此这里要实现AOP代理实例的属性注入，主要在createBean生命周期中进行，核心有两点：①代理对象需要执行执行所有的属性注入方法②createBean方法返回时，"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("通过ProxyFactory代理工厂创建的对象不能被Spring容器内部createBeanInstance创建的实例给覆盖")])]),t._v("。")],1),t._v(" "),a("ul",[a("li",[t._v("架构设计")])]),t._v(" "),a("p",[t._v("把resolveBeforeInstantiation解析创建AOP代理对象的步骤放到beanPostProcessorAfterInitialization"),a("strong",[t._v("初始化方法后置执行")]),t._v("，这样可以同时保证上述两点。所有的Bean都会经过如下转换过程："),a("strong",[t._v("Spring实例——>属性填充——>解析并创建AOP代理实例")]),t._v("。")]),t._v(" "),a("p",[t._v("这里TargetSource的构建方法和之前不同的地方在于，之前是根据beanClass直接暴力new一个对象进行代理(没有任何属性)。而"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("修改后可以直接把前面完成属性填充的Spring对象作为要代理的目标对象TargetSource。")])])],1),t._v(" "),a("p",[t._v("另外如果Spring实例如果是通过Cglib创建的，在根据TargetSource反射创建动态代理时会出错。因此通过TargetSource获取Class对象需要进一步转换拿到实际所定义的Class。")]),t._v(" "),a("h2",{attrs:{id:"_6-三级缓存实现循环依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-三级缓存实现循环依赖"}},[t._v("#")]),t._v(" 6.三级缓存实现循环依赖")]),t._v(" "),a("p",[t._v("一级缓存解决循环依赖：缓存读取对象存在则返回——>创建新的对象——>对象创建后马上写入缓存——>属性注入。")]),t._v(" "),a("p",[t._v("三级缓存整体思路类似，解决了AOP动态代理对象的属性初始化问题，更便于分层管理。")]),t._v(" "),a("h4",{attrs:{id:"架构设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#架构设计"}},[t._v("#")]),t._v(" 架构设计")]),t._v(" "),a("ul",[a("li",[t._v("缓存设计")])]),t._v(" "),a("p",[t._v("singletonObjects：一级缓存，存放成品对象。")]),t._v(" "),a("p",[t._v("earlySingletonObjects：二级缓存。此处实际上存放两种对象，一种是"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("循环依赖过程当中属性未注入完的半成品对象")])]),t._v("。而如果不存在属性依赖，"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("存放的是成品对象")])]),t._v("。事实上这个地方是一个动态的过程，因为在循环依赖问题中,"),a("strong",[t._v("二级缓存保存的对象(AOP代理的TargetSource真实对象)和applyPropertyValues属性注入过程使用对象都是同一个bean")]),t._v("，在执行的过程中都会从半成品自动转化为成品。")],1),t._v(" "),a("p",[a("strong",[t._v("二级缓存读取的时机(非空)")]),t._v("：在A对象完成整个属性的循环依赖后，最终添加到一级缓存之前的getSingleton中进行。")]),t._v(" "),a("p",[t._v("singletonFactories：三级缓存。此处存放的是代理工厂对象(Lambda表达式)，"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("通过调用getObject方法触发Lambda表达式的延迟加载机制，代理工厂会对当前Bean解析并最终返回AOP代理对象或者普通Bean对象。")])])],1),t._v(" "),a("p",[t._v("三级缓存的读取时机(非空)：不存在循环依赖的对象最终添加到一级缓存之前的getSingleton中进行。")]),t._v(" "),a("ul",[a("li",[t._v("流程设计")])]),t._v(" "),a("p",[t._v("doCreateBean生命周期中，spring容器创造对象后，需要立刻放入三级缓存暴露出来：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanDefinition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSingleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" finalBean "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addSingletonFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEarlyBeanReference")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("beanDefinition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("finalBean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("在普通bean都初始化完后，需要从三级缓存中取出AOP代理工厂，并通过getObject取出解析的成品对象(此时触发Lambda延迟回调)。并将成品对象注册到一级缓存中(清空二三级缓存)。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("if (beanDefinition.isSingleton()) {\n    exposedObject = getSingleton(beanName);\n    registerSingleton(beanName, exposedObject);\n}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("ul",[a("li",[t._v("AOP代理设计")])]),t._v(" "),a("p",[t._v("在DefaultAdvisorAutoProxyCreator动态代理类中，设计了earlyProxyReferences作为代理缓存(存放解析过的beanName)。getEarlyBeanReference方法用于对bean对象的"),a("strong",[t._v("延迟动态代理解析")]),t._v("，结果作为三级缓存的bean返回。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEarlyBeanReference")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" bean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    earlyProxyReferences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 解析并返回代理对象*/")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wrapIfNecessary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("此处代理缓存的优点是"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("解决了AOP代理对象在循环依赖中的多次解析生成重复代理对象的问题")])]),t._v("，但是"),a("strong",[t._v("并没有解决普通代理对象的多次解析问题")]),t._v("。")],1),t._v(" "),a("ul",[a("li",[t._v("细节")])]),t._v(" "),a("p",[t._v("Spring采用Cglib实例化+AOP采用Cglib则"),a("strong",[t._v("在对象创建时")]),t._v("会出错(Spring解决嵌套代理的方式是通过拦截器链)。")]),t._v(" "),a("p",[t._v("AOP采用jdk代理则会在setFieldValue"),a("strong",[t._v("反射赋值")]),t._v("时出错，因为Hutool工具包直接通过jdk代理对象的getClass拿不到真正的目标类。")]),t._v(" "),a("p",[t._v("earlyProxyReferences遗留问题：代理缓存的作用可以"),a("strong",[t._v("保证循环依赖的代理对象只进行一次代理解析过程")]),t._v("。虽然引入了缓存之后，所有单例对象的AOP代理解析创建都可以交给三级缓存singletonFactories进行，因此对于非循环依赖的普通代理对象实际上执行了两次代理对象创建(一次是initializeBean，另一次是getEarlyBeanReference)，存在OOM的隐患，这里去掉初始化后置代理处理方法虽然可以解决，但是"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("原型对象的整个Bean生命周期不会走缓存，因此原型对象的代理解析只能交给initializeBean进行")])]),t._v("，所以不能去掉初始化后置的解析过程。")],1),t._v(" "),a("p",[t._v("要解决这个问题可以在后置解析过程中加一层单例判断，如果为单例模式则直接跳过解析过程。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessAfterInitialization")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" bean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinition")]),t._v(" beanDefinition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" beanFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanDefinition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanDefinition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPrototype")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("earlyProxyReferences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wrapIfNecessary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h4",{attrs:{id:"三级缓存下的循环依赖与aop代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三级缓存下的循环依赖与aop代理"}},[t._v("#")]),t._v(" 三级缓存下的循环依赖与AOP代理")]),t._v(" "),a("p",[a("strong",[t._v("在doGetBean中有一个缓存预读取")]),t._v("，如果不存在才执行createBean创建bean整个生命周期。下面以整个A—>B—>A的循环依赖顺序为例，此处A注册了切面需要AOP代理：")]),t._v(" "),a("p",[t._v("①A创建对象，并将代理工厂对象存入三级缓存")]),t._v(" "),a("p",[t._v("②A执行applyPropertyValues进行属性依赖注入，getBean(B)")]),t._v(" "),a("p",[t._v("③B创建对象，并将代理工厂对象存入三级缓存")]),t._v(" "),a("p",[t._v("④B执行applyPropertyValues进行属性依赖注入，getBean(A)")]),t._v(" "),a("p",[t._v("⑤在doGetBean入口处从缓存读取A，触发①中的三级缓存代理工厂解析调用，添加代理缓存earlyProxyReferences，拿到AOP代理解析结果，并存入二级缓存。返回给④")]),t._v(" "),a("p",[t._v("⑥B属性填充完毕，从③取出代理工厂对象，触发代理解析方法执行，再将B成品对象的返回结果(普通Bean)存入一级缓存。最后返回②")]),t._v(" "),a("p",[t._v("⑦A属性填充完毕，postProcessAfterInitialization执行后置的代理解析，因为代理缓存存在，故直接返回。最后从二级缓存取出成品对象，并存入一级缓存。流程结束。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230514/cache.3b6vppxjyp60.webp",alt:"cache"}})]),t._v(" "),a("h2",{attrs:{id:"_7-数据类型转换工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-数据类型转换工厂"}},[t._v("#")]),t._v(" 7.数据类型转换工厂")]),t._v(" "),a("ul",[a("li",[t._v("功能")])]),t._v(" "),a("p",[t._v("在"),a("strong",[t._v("属性填充applyPropertyValues")]),t._v("和@Value解析"),a("strong",[t._v("postProcessPropertyValues")]),t._v("两个方法中会通过setField反射给对象设置属性，为了保证value类型和对象属性类型(包括不同格式)匹配一致，Spring中使用一个全局的类型转换器。")]),t._v(" "),a("ul",[a("li",[t._v("架构设计")])]),t._v(" "),a("p",[t._v("转换器需要"),a("strong",[t._v("在Bean的生命周期属性注入时使用")]),t._v("，因此"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("类型转换服务对象在引入时应该存放在BeanFactory中")])]),t._v("，而不是放在上下文对象中。")],1),t._v(" "),a("p",[t._v("ConversionServiceFactoryBean："),a("strong",[t._v("将FactoryBean和InitializingBean联合使用")]),t._v("，实现成员对象赋值与剥离，非常精彩。")]),t._v(" "),a("p",[t._v("①类型转换工厂，维护了一个Set集合用来保存"),a("strong",[t._v("用户自定义转换器集合")]),t._v("，此处"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("将用户自定义转换器引入Spring的方式")])]),t._v("是通过在XML中"),a("strong",[t._v("将工厂的Set属性通过ref关联到用户定义的FactoryBean对象(为了保证类型匹配getObject也需要为Set集合)")]),t._v("。")],1),t._v(" "),a("p",[t._v("②此外工厂Bean还"),a("strong",[t._v("实现了InitializingBean接口会在afterPropertySet中new创建DefaultConversionService转换服务对象")]),t._v("，并将"),a("strong",[t._v("用户自定义创建的转换器集合")]),t._v("注册到"),a("strong",[t._v("转换服务对象的缓存Map")]),t._v("中。")]),t._v(" "),a("p",[t._v("③这里通过FactoryBean#getObject方法，巧妙的把ConversionServiceFactoryBean工厂对象转化为DefaultConversionService服务对象。在afterPropertySet阶段把工厂对象里面的所有转化器对象全部搬到服务对象里完成注册，最后直接"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("把成员属性(服务对象)返回")])]),t._v("。")],1),t._v(" "),a("p",[t._v("finishBeanFactoryInitialization：上下文操作类会将"),a("strong",[t._v("类型转换工厂初始化并将该Bean对象存放入BeanFactory中")]),t._v("，然后再执行容器预加载。在Bean生命周期中BeanFactory通过"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("调用DefaultConversionService类型转换服务对象")])]),t._v("实现格式转换。")],1),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230514/convert.2ymqfl5n8w80.webp",alt:"convert"}})]),t._v(" "),a("ul",[a("li",[t._v("细节")])]),t._v(" "),a("p",[t._v("Collections.singleton：返回一个Set集合，其中的元素为一个只包含object(obj)的不可变集合。")]),t._v(" "),a("p",[t._v("Converter<S,T>：用户需要指定接口泛型和实现convert转换方法，来定制化实现不同类型的转化方法。")]),t._v(" "),a("p",[t._v("GenericConversionService实现了整个转换服务的关键方法：")]),t._v(" "),a("p",[t._v("①"),a("font",{attrs:{color:"red"}},[a("strong",[t._v("getRequiredTypeInfo：用于解析Converter对象接口泛型参数的源和目的转换类型，并封装成GenericConverter.ConvertiblePair对象(内部类，保存源&目的类型转换对)返回。")])])],1),t._v(" "),a("p",[t._v("②converters：维护一个转换器缓存Map。key为源&目的类型对，value为对应进行类型转换的转换器适配器。")]),t._v(" "),a("p",[t._v("③getConverter：根据源目的类型获取对应转换器。这里类型转换需要考虑到子父类型的转换问题。")]),t._v(" "),a("p",[t._v("④采用适配器模式(用户自定义的Converter对象都需要先转为ConverterAdapter)"),a("strong",[t._v("基于GenericConverter接口抽象出两种类型转换适配器")]),t._v("，一种是转换的目标类型可以是所指定Target类型的子类,另一种是直接类型转换。")]),t._v(" "),a("h1",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);a.default=s.exports}}]);