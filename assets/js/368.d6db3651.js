(window.webpackJsonp=window.webpackJsonp||[]).push([[368],{685:function(t,s,a){"use strict";a.r(s);var r=a(4),_=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"全局锁、表锁、行锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局锁、表锁、行锁"}},[t._v("#")]),t._v(" 全局锁、表锁、行锁")]),t._v(" "),s("h2",{attrs:{id:"_1-全局锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局锁"}},[t._v("#")]),t._v(" 1.全局锁")]),t._v(" "),s("p",[t._v("MySQL加"),s("strong",[t._v("全局读锁")]),t._v("：Flush Table With Read Lock 此时装个库处于"),s("strong",[t._v("只读状态")]),t._v("，"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("所有更新修改语句全部会被阻塞")])]),t._v("。")],1),t._v(" "),s("p",[t._v("全局锁使用场景："),s("strong",[t._v("全库逻辑备份")]),t._v("。但是为了不影响业务，可以"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("在可重复隔离级别下开启事务")])]),t._v("，拿到"),s("strong",[t._v("一致性视图")]),t._v("进行备份更新。一般有如下几种方法：")],1),t._v(" "),s("ul",[s("li",[t._v("使用"),s("strong",[t._v("single-transaction")]),t._v("启动事务。(InnoDB支持)")]),t._v(" "),s("li",[t._v("如果当前数据库表不支持事务，采用set global readonly=true。但是同时有以下缺点：\n"),s("ul",[s("li",[t._v("改变全局变量影响大")]),t._v(" "),s("li",[t._v("用户如果异常断开连接，那么数据库会一直保存readonly状态，导致整个库处于不可写状态。")])])])]),t._v(" "),s("h2",{attrs:{id:"_2-表级锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-表级锁"}},[t._v("#")]),t._v(" 2.表级锁")]),t._v(" "),s("h3",{attrs:{id:"_2-1表锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1表锁"}},[t._v("#")]),t._v(" 2.1表锁")]),t._v(" "),s("p",[t._v("lock tables t1 read，t2 write：限制当前和其它线程只能够对t1表进行读，当前线程只能够对t2写，其他线程对t2读写都会被阻塞。通过unlock tables释放锁。")]),t._v(" "),s("h3",{attrs:{id:"_2-2元数据锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2元数据锁"}},[t._v("#")]),t._v(" 2.2元数据锁")]),t._v(" "),s("p",[t._v("MDL在访问每个表时会自动加锁("),s("strong",[t._v("主要是用于对表结构的更改")]),t._v(")，系统会"),s("strong",[t._v("默认添加")]),t._v("的锁。对表做增删改查时，加MDL读锁；对表结构进行变更操作时，添加MDL写锁。"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("事务提交才会释放锁")])]),t._v("。")],1),t._v(" "),s("p",[t._v("MDL读锁之间不互斥，读写锁互斥。")]),t._v(" "),s("h4",{attrs:{id:"小表添加字段的安全问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小表添加字段的安全问题"}},[t._v("#")]),t._v(" 小表添加字段的安全问题")]),t._v(" "),s("ul",[s("li",[t._v("A线程获取“MDL读锁”，对数据库进行增删改查")]),t._v(" "),s("li",[t._v("B线程要获取“MDL写锁”，给表添加新的字段。但是"),s("strong",[t._v("由于A线程没有提交事务，因此B线程被阻塞")]),t._v("。")]),t._v(" "),s("li",[t._v("C线程要获取“MDL读锁”，但是因为"),s("strong",[t._v("要读写的内容是B添加后的新表")]),t._v("，因此"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("B被阻塞会导致C以及后续所有读写请求都会被阻塞")])]),t._v("。整个表此时完全不可读写。")],1)]),t._v(" "),s("h4",{attrs:{id:"添加字段如何安全解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加字段如何安全解决"}},[t._v("#")]),t._v(" 添加字段如何安全解决")]),t._v(" "),s("ul",[s("li",[t._v("本质上是长时间占据事务不提交的问题，在添加字段之前查询innodb_trx表，"),s("strong",[t._v("查看所要添加字段的那个表是否在执行长事务")]),t._v("，如果是则"),s("strong",[t._v("暂停当前添加操作或者是kill掉长事务")]),t._v("。")]),t._v(" "),s("li",[t._v("如果该表是"),s("strong",[t._v("热点信息表")]),t._v("，虽然不占据长事务但是频繁被其它线程申请读锁。这种情况下如果有字段添加操作，那么"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("需要给这个alter操作设置一个等待时间")])]),t._v("，在等待时间内如果能拿到MDL写锁则正常进行DDL，超时后则放弃当前DDL操作，"),s("strong",[t._v("避免阻塞后续的增删改查操作")]),t._v("。")],1)]),t._v(" "),s("h3",{attrs:{id:"_2-3场景分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3场景分析"}},[t._v("#")]),t._v(" 2.3场景分析")]),t._v(" "),s("p",[t._v("当前线程使用single-transaction添加读锁备份数据，主库从binlog传来一个DDL语句，最后Q5读到的结果有什么不同？")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("Q1:"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SESSION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPEATABLE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 设置可重复读隔离级别\n\nQ2:"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSISTENT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SNAPSHOT")]),t._v("； 获取一致性视图\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* other tables */")]),t._v("\nQ3:"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SAVEPOINT")]),t._v(" sp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 设置保存点\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 时刻 1 */")]),t._v("\nQ4:"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 拿到表结构\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 时刻 2 */")]),t._v("\nQ5:"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 导出数据\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 时刻 3 */")]),t._v("\nQ6:"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ROLLBACK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SAVEPOINT")]),t._v(" sp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 释放MDL读锁，并回滚到sp\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 时刻 4 */")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("ul",[s("li",[t._v("DDL在时刻1到达，则Q5没有影响照常运行，导出的是DDL修改过后的表结构。")]),t._v(" "),s("li",[t._v("DDL在时刻2到达，会占据MDL写锁，在执行Q5时会报错Table definition has changed, please retry transaction，mysqldump终止。")]),t._v(" "),s("li",[t._v("DDL如果是在时刻3到达，那么因为Q5占据着MDL读锁，则DDL会被阻塞，直到Q6完成")]),t._v(" "),s("li",[t._v("DDL在时刻4开始，因为Q6已经释放MDL读锁了，因此没有影响，导出的数据是DDL前的表结构")])]),t._v(" "),s("h2",{attrs:{id:"_3-行锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-行锁"}},[t._v("#")]),t._v(" 3.行锁")]),t._v(" "),s("p",[t._v("InnoDB支持行锁；而MyISAM不支持，因此并发控制只能够使用表锁，粒度太大。")]),t._v(" "),s("p",[t._v("💡"),s("strong",[t._v("加行锁是由InnoDB引擎完成，与server层无关")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_3-1两阶段锁协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1两阶段锁协议"}},[t._v("#")]),t._v(" 3.1两阶段锁协议")]),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[s("strong",[t._v("行锁的获取时机：两个事务操作同一行数据，存在冲突时才会加行锁，先操作的事务会获得行锁")])]),t._v("。")],1),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[s("strong",[t._v("行锁的释放：获取行锁的事务直到提交完事务，才会释放行锁")])]),t._v("。")],1),t._v(" "),s("p",[t._v("以下图为例，事务A拿到行锁，因此B执行时会被阻塞，直到事务A释放锁之后，事务B才执行。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230609/image.3rao9u5hnv.webp",alt:""}})]),t._v(" "),s("p",[t._v("因此如果在一个事务中，需要操作多行数据，每个增删改查语句都会添加行锁，因此"),s("font",{attrs:{color:"red"}},[s("strong",[t._v("可以把最可能影响并发的语句尽可能往后放")])]),t._v("，减小和其它事务冲突的概率。")],1),t._v(" "),s("h3",{attrs:{id:"_3-2死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2死锁"}},[t._v("#")]),t._v(" 3.2死锁")]),t._v(" "),s("p",[t._v("由于行锁只有当事务提交后才会释放，存在“"),s("strong",[t._v("持有锁资源的同时请求其它锁资源")]),t._v("”的死锁问题，两个事务出现锁资源循环依赖，具体如下：")]),t._v(" "),s("ul",[s("li",[t._v("事务A先拿到id=1的锁")]),t._v(" "),s("li",[t._v("事务B拿到id=2的锁")]),t._v(" "),s("li",[t._v("事务A要更改id=2记录，但是因为锁被事务B拿着，因此事务A持有锁的同时被阻塞。")]),t._v(" "),s("li",[t._v("同理事务B要操作id=1，也会被阻塞。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/blage-coding/picx-images-hosting@master/20230609/image.4w8xsdyl3ks0.webp",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_3-3死锁解决方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3死锁解决方式"}},[t._v("#")]),t._v(" 3.3死锁解决方式")]),t._v(" "),s("p",[t._v("死锁监测一般有如下两种方式：")]),t._v(" "),s("ul",[s("li",[t._v("方式1：等待事务超时，回滚。超时时间通过innodb_lock_wait_timeout设置。")]),t._v(" "),s("li",[t._v("方式2：通过innodb_deadlock_detect设置为on开启死锁监测，"),s("strong",[t._v("发现死锁后主动回滚其中一条事务")]),t._v("。")])]),t._v(" "),s("p",[t._v("一般采用方式2解决死锁问题，但是在方式二中，每个死锁的线程都会检查所依赖的其它所有线程是否死锁，这是一个O(n*n)的复杂度。对于一条🔥"),s("strong",[t._v("热点数据而言，同时有1000个线程请求，则死锁监测操作量级在百万以上，从而消耗大量CPU资源")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_3-4死锁监测机制带来的热点数据更新的性能问题解决方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4死锁监测机制带来的热点数据更新的性能问题解决方式"}},[t._v("#")]),t._v(" 3.4死锁监测机制带来的热点数据更新的性能问题解决方式")]),t._v(" "),s("ul",[s("li",[t._v("关闭死锁监测")])]),t._v(" "),s("p",[t._v("能够确保业务一定不会出现死锁，可以临时关闭死锁检测。否则当出现死锁的情况下还关闭监测，会导致大量业务超时。")]),t._v(" "),s("ul",[s("li",[t._v("控制并发度")])]),t._v(" "),s("p",[t._v("如果在客户端进行并发控制，即使并发度很小，但是如果部署的客户端应用很多，汇总到的服务端的线程数量也很多，因此这种方法不能完全解决问题。")]),t._v(" "),s("p",[t._v("✨药到病除的方法是"),s("strong",[t._v("在数据库进行并发控制，比如在服务端打入数据库之前，加个中间件记录当前数据库的并发线程数量")]),t._v("。")]),t._v(" "),s("p",[t._v("✨另一种方法可以"),s("strong",[t._v("将一行的冲突打散成多行，比如对于共享资源，分表或者分行进行存储")]),t._v("。最终统计还原时再将所有记录相加。")])])}),[],!1,null,null,null);s.default=_.exports}}]);