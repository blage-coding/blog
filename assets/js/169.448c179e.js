(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{488:function(i,t,n){"use strict";n.r(t);var p=n(4),a=Object(p.a)({},(function(){var i=this,t=i._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[t("h1",{attrs:{id:"_198-打家劫舍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_198-打家劫舍"}},[i._v("#")]),i._v(" 198.打家劫舍")]),i._v(" "),t("p",[i._v("你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。")]),i._v(" "),t("blockquote",[t("p",[i._v("输入：[2,7,9,3,1]\n输出：12")])]),i._v(" "),t("ol",[t("li",[i._v("动规。dp[i][0]表示第i间房子不偷窃所得最高金额，dp[i][1]表示偷窃第i间房子的最高金额。状态转移方程："),t("strong",[i._v("dp[i][0]=Math.max(dp[i-1][1],dp[i-1][0])，dp[i][1]=Math.max(dp[i-2][1]+nums[i],dp[i-1][0]+nums[i]")]),i._v(")空间大小O(2n)。")])]),i._v(" "),t("ul",[t("li",[i._v("可以只开辟O(n)空间，dp[i]表示考虑第i间房子所能获得的最高金额。则有\ndp[i]=max(偷窃第i间房子，不偷窃第i间房子)=Math.max(dp[i-2]+nums[i]，dp[i-1])，注意我们完全不需要关注dp[i]到底是偷了还是没偷，如果i-1间房子没偷，dp[i-2]等于dp[i-1]，结果是一样的。")]),i._v(" "),t("li",[i._v("更进一步优化，只需要两个变量维护前两个房间最高金额+一个变量维护当前房间最高金额。空间O(1)")])])])}),[],!1,null,null,null);t.default=a.exports}}]);